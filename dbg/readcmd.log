[Aut::initPIList] x0 x1 x2 x3 x4 x5 x6 x7
Aut::initSpecialAllphabet::epsilon
Aut::initSpecialAllphabet::leftAngle
Aut::initSpecialAllphabet::rightAngle
>> readCmd::dgDir = benchmark/laut/e-str-rep-new/25888/
union sigmaStar_safe_50 sigmaStar_safe_51 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d9 s0)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d9 s0)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d9 s0)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d9 s0))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=2
[Aut::buildParam] ++gflag=3
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d9 s0)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d9 s0)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d9 s0)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d9 s0))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=5
[Aut::buildParam] ++gflag=6
[Aut::defineFun] name=tmp1 body=(or (and (not s1) tmpI1) (and s1 tmpI2))
[Aut::buildVmtNode] line = (or (and (not s1) tmpI1) (and s1 tmpI2))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) tmpI1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpI1
[Aut::buildVmtNode] line = (and s1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s1) (not s1.next) tmpT1)
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) tmpT1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = tmpT1
[Aut::defineFun] name=tmp3 body=(and s1 s1.next tmpT2)
[Aut::buildVmtNode] line = (and s1 s1.next tmpT2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = tmpT2
[Aut::defineFun] name=tmp4 body=(or tmp2 tmp3)
[Aut::buildVmtNode] line = (or tmp2 tmp3)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::defineFun] name=T body=(! tmp4 :trans true)
[Aut::buildVmtNode] line = (! tmp4 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp5 body=(or (and (not s1) tmpO1) (and s1 tmpO2))
[Aut::buildVmtNode] line = (or (and (not s1) tmpO1) (and s1 tmpO2))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) tmpO1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = (and s1 tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp5) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp5) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp5
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=7
[Aut::buildParam] ++gflag=8
write x_2 
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d0 0x1e87ea0 MODULE 8
name=d0 typeMODULE
not NOT 8
   s0 STATE 0
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d1 0x1e88480 MODULE 8
name=d1 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 0
   x1 INPUT 0
   x3 INPUT 0
   not NOT 8
      x5 INPUT 0
   not NOT 8
      x7 INPUT 0
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 0
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d2 0x1e89120 MODULE 8
name=d2 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      x6 INPUT 0
   x7 INPUT 9
name=x7 0x1e7fab0 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d3 0x1e89d60 MODULE 8
name=d3 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x4 INPUT 0
   x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d4 0x1e8a7e0 MODULE 8
name=d4 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d5 0x1e8b2a0 MODULE 8
name=d5 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 9
name=x6 0x1e7f930 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d6 0x1e8bd70 MODULE 8
name=d6 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 0
   x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   not NOT 8
      x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      x6 INPUT 9
name=x6 0x1e7f930 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d7 0x1e8c9d0 MODULE 8
name=d7 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 9
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   not NOT 8
      x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d8 0x1e8d750 MODULE 8
name=d8 typeMODULE
or OR 8
   d1 MODULE 9
   d2 MODULE 9
   d3 MODULE 9
   d4 MODULE 9
   d5 MODULE 9
   d6 MODULE 9
   d7 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d9 0x1e8d650 MODULE 8
name=d9 typeMODULE
not NOT 8
   s0 STATE 9
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d10 0x1e86270 MODULE 8
name=d10 typeMODULE
not NOT 8
   s0 STATE 9
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d11 0x1e87050 MODULE 8
name=d11 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   not NOT 8
      x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      x7 INPUT 9
name=x7 0x1e7fab0 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d12 0x1e92600 MODULE 8
name=d12 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      x6 INPUT 9
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 9
name=x7 0x1e7fab0 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d13 0x1e93210 MODULE 8
name=d13 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d14 0x1e93c90 MODULE 8
name=d14 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d15 0x1e94750 MODULE 8
name=d15 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 9
name=x1 0x1e7f190 type=INPUT
   not NOT 8
      x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 9
name=x6 0x1e7f930 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d16 0x1e95220 MODULE 8
name=d16 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 9
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   not NOT 8
      x5 INPUT 9
name=x5 0x1e7f7b0 type=INPUT
   not NOT 8
      x6 INPUT 9
name=x6 0x1e7f930 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d17 0x1e95e80 MODULE 8
name=d17 typeMODULE
and AND 8
   not NOT 8
      x0 INPUT 9
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 9
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 9
name=x3 0x1e7f490 type=INPUT
   not NOT 8
      x4 INPUT 9
name=x4 0x1e7f610 type=INPUT
   not NOT 8
      s0 STATE 9
name=s0 0x1e87ae0 type=STATE
   not NOT 8
      s0.next STATE_N 9
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d18 0x1e96c00 MODULE 8
name=d18 typeMODULE
or OR 8
   d11 MODULE 9
   d12 MODULE 9
   d13 MODULE 9
   d14 MODULE 9
   d15 MODULE 9
   d16 MODULE 9
   d17 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d19 0x1e96b00 MODULE 8
name=d19 typeMODULE
not NOT 8
   s0 STATE 9
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d20 0x1e91900 MODULE 8
name=d20 typeMODULE
or OR 8
   and AND 8
      not NOT 8
         s1 STATE 0
      d0 MODULE 9
   and AND 8
      s1 STATE 9
name=s1 0x1e968c0 type=STATE
      d10 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d21 0x1e99aa0 MODULE 8
name=d21 typeMODULE
and AND 8
   not NOT 8
      s1 STATE 9
name=s1 0x1e968c0 type=STATE
   not NOT 8
      s1.next STATE_N 0
   d8 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d22 0x1e9a1c0 MODULE 8
name=d22 typeMODULE
and AND 8
   s1 STATE 9
name=s1 0x1e968c0 type=STATE
   s1.next STATE_N 9
name=s1.next 0x1e96a10 type=STATE_N
   d18 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d23 0x1e9a560 MODULE 8
name=d23 typeMODULE
or OR 8
   d21 MODULE 9
   d22 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] d24 0x1e9ad80 MODULE 8
name=d24 typeMODULE
or OR 8
   and AND 8
      not NOT 8
         s1 STATE 9
name=s1 0x1e968c0 type=STATE
      d9 MODULE 9
   and AND 8
      s1 STATE 9
name=s1 0x1e968c0 type=STATE
      d19 MODULE 9
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] I 0x1e90580 MODULE 8
! EXCM 8
   d20 MODULE 9
   :init SPECIAL 0
   true CONST1 0
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] T 0x1e9a880 MODULE 8
! EXCM 8
   d23 MODULE 9
   :trans SPECIAL 0
   true CONST1 9
name=true 0x1e7fd80 type=CONST1
[Aut::writeDefineFun] gflag=9
[Aut::writeDefineFun] O 0x1e9b5c0 MODULE 8
! EXCM 8
   not NOT 8
      d24 MODULE 9
   :invar-property SPECIAL 0
   0 NUM 0
trklen x_2 0 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d10" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d18" , "(or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d11 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d17
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d19" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d0 s0)) (and s1 (d10 s0))))"
[Aut::parse] tokenList = [ "d20" , "(or (and (not s1) (d0 s0)) (and s1 (d10 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d0 s0)) (and s1 (d10 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d0 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = (and s1 (d10 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d10 s0)
[Aut::buildVmtNode] root = d10
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d21" , "(and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d23" , "(or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d22
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d9 s0)) (and s1 (d19 s0))))"
[Aut::parse] tokenList = [ "d24" , "(or (and (not s1) (d9 s0)) (and s1 (d19 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d9 s0)) (and s1 (d19 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d9 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (and s1 (d19 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d19 s0)
[Aut::buildVmtNode] root = d19
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d20 s0 s1) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d20 s0 s1) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d20 s0 s1) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d20 s0 s1)
[Aut::buildVmtNode] root = d20
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d24 s0 s1)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d24 s0 s1)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d24 s0 s1)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d24 s0 s1))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d24 s0 s1)
[Aut::buildVmtNode] root = d24
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=11
[Aut::buildParam] ++gflag=12
[Aut::defineFun] name=tmp1 body=(and (not epsilon) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] line = (and (not epsilon) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not epsilon)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::defineFun] name=tmp2 body=(and epsilon (= n0.next n0))
[Aut::buildVmtNode] line = (and epsilon (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (and tmpT (or tmp1 tmp2))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = tmpT
[Aut::buildVmtNode] line = (or tmp1 tmp2)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = tmp2
[Aut::clearParam] ++gflag=13
[Aut::buildParam] ++gflag=14
write x_2_len 
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] epsilon 0x1e7ff00 MODULE 14
name=epsilon typeMODULE
and AND 14
   x0 INPUT 9
   not NOT 14
      x1 INPUT 9
   not NOT 14
      x2 INPUT 9
   not NOT 14
      x3 INPUT 9
   not NOT 14
      x4 INPUT 9
   not NOT 14
      x5 INPUT 9
   not NOT 14
      x6 INPUT 9
   not NOT 14
      x7 INPUT 9
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d0 0x1e9c290 MODULE 14
name=d0 typeMODULE
not NOT 14
   s0 STATE 9
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d1 0x1e9c800 MODULE 14
name=d1 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   not NOT 14
      x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      x7 INPUT 15
name=x7 0x1e7fab0 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 9
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d2 0x1ea01c0 MODULE 14
name=d2 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      x6 INPUT 15
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 15
name=x7 0x1e7fab0 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d3 0x1ea0e00 MODULE 14
name=d3 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d4 0x1ea1880 MODULE 14
name=d4 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d5 0x1ea2340 MODULE 14
name=d5 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 15
name=x6 0x1e7f930 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d6 0x1ea2e10 MODULE 14
name=d6 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 15
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   not NOT 14
      x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      x6 INPUT 15
name=x6 0x1e7f930 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d7 0x1ea3a70 MODULE 14
name=d7 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 15
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   not NOT 14
      x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d8 0x1ea47f0 MODULE 14
name=d8 typeMODULE
or OR 14
   d1 MODULE 15
   d2 MODULE 15
   d3 MODULE 15
   d4 MODULE 15
   d5 MODULE 15
   d6 MODULE 15
   d7 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d9 0x1ea46f0 MODULE 14
name=d9 typeMODULE
not NOT 14
   s0 STATE 15
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d10 0x1ea5d30 MODULE 14
name=d10 typeMODULE
not NOT 14
   s0 STATE 15
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d11 0x1ea60d0 MODULE 14
name=d11 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   not NOT 14
      x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      x7 INPUT 15
name=x7 0x1e7fab0 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d12 0x1ea6c20 MODULE 14
name=d12 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      x6 INPUT 15
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 15
name=x7 0x1e7fab0 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d13 0x1ea7880 MODULE 14
name=d13 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d14 0x1ea82f0 MODULE 14
name=d14 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d15 0x1ea8d90 MODULE 14
name=d15 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 15
name=x1 0x1e7f190 type=INPUT
   not NOT 14
      x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 15
name=x6 0x1e7f930 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d16 0x1ea9860 MODULE 14
name=d16 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 15
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   not NOT 14
      x5 INPUT 15
name=x5 0x1e7f7b0 type=INPUT
   not NOT 14
      x6 INPUT 15
name=x6 0x1e7f930 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d17 0x1ea5a60 MODULE 14
name=d17 typeMODULE
and AND 14
   not NOT 14
      x0 INPUT 15
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 15
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 15
name=x3 0x1e7f490 type=INPUT
   not NOT 14
      x4 INPUT 15
name=x4 0x1e7f610 type=INPUT
   not NOT 14
      s0 STATE 15
name=s0 0x1e87ae0 type=STATE
   not NOT 14
      s0.next STATE_N 15
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d18 0x1ea45a0 MODULE 14
name=d18 typeMODULE
or OR 14
   d11 MODULE 15
   d12 MODULE 15
   d13 MODULE 15
   d14 MODULE 15
   d15 MODULE 15
   d16 MODULE 15
   d17 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d19 0x1eab260 MODULE 14
name=d19 typeMODULE
not NOT 14
   s0 STATE 15
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d20 0x1eac830 MODULE 14
name=d20 typeMODULE
or OR 14
   and AND 14
      not NOT 14
         s1 STATE 9
      d0 MODULE 15
   and AND 14
      s1 STATE 15
name=s1 0x1e968c0 type=STATE
      d10 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d21 0x1ead440 MODULE 14
name=d21 typeMODULE
and AND 14
   not NOT 14
      s1 STATE 15
name=s1 0x1e968c0 type=STATE
   not NOT 14
      s1.next STATE_N 9
   d8 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d22 0x1eae080 MODULE 14
name=d22 typeMODULE
and AND 14
   s1 STATE 15
name=s1 0x1e968c0 type=STATE
   s1.next STATE_N 15
name=s1.next 0x1e96a10 type=STATE_N
   d18 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d23 0x1eae7a0 MODULE 14
name=d23 typeMODULE
or OR 14
   d21 MODULE 15
   d22 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d24 0x1eaf000 MODULE 14
name=d24 typeMODULE
or OR 14
   and AND 14
      not NOT 14
         s1 STATE 15
name=s1 0x1e968c0 type=STATE
      d9 MODULE 15
   and AND 14
      s1 STATE 15
name=s1 0x1e968c0 type=STATE
      d19 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d25 0x1e9efb0 MODULE 14
name=d25 typeMODULE
and AND 14
   not NOT 14
      epsilon MODULE 15
   = EQ 14
      n0.next LEN_N 0
      + PLUS 14
         n0 LEN 0
         1 NUM 0
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d26 0x1e9db40 MODULE 14
name=d26 typeMODULE
and AND 14
   epsilon MODULE 15
   = EQ 14
      n0.next LEN_N 15
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 15
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] d27 0x1eb1ab0 MODULE 14
name=d27 typeMODULE
and AND 14
   d23 MODULE 15
   or OR 14
      d25 MODULE 15
      d26 MODULE 15
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] I 0x1eafac0 MODULE 14
! EXCM 14
   d20 MODULE 15
   :init SPECIAL 0
   true CONST1 9
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] T 0x1eb0080 MODULE 14
! EXCM 14
   d27 MODULE 15
   :trans SPECIAL 0
   true CONST1 15
name=true 0x1e7fd80 type=CONST1
[Aut::writeDefineFun] gflag=15
[Aut::writeDefineFun] O 0x1eb06d0 MODULE 14
! EXCM 14
   not NOT 14
      d24 MODULE 15
   :invar-property SPECIAL 0
   0 NUM 0
replace x_2_len regex_4 regex_5 regex_6 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0 () Int)"
[Aut::parse] tokenList = [ "n0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0.next () Int)"
[Aut::parse] tokenList = [ "n0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))"
[Aut::parse] tokenList = [ "epsilon" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d10" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d18" , "(or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d11 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d17
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d19" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d0 s0)) (and s1 (d10 s0))))"
[Aut::parse] tokenList = [ "d20" , "(or (and (not s1) (d0 s0)) (and s1 (d10 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d0 s0)) (and s1 (d10 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d0 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = (and s1 (d10 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d10 s0)
[Aut::buildVmtNode] root = d10
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d21" , "(and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d23" , "(or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d22
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d9 s0)) (and s1 (d19 s0))))"
[Aut::parse] tokenList = [ "d24" , "(or (and (not s1) (d9 s0)) (and s1 (d19 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d9 s0)) (and s1 (d19 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d9 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (and s1 (d19 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d19 s0)
[Aut::buildVmtNode] root = d19
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))"
[Aut::parse] tokenList = [ "d25" , "(and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d26" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (n0.next Int)) Bool (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))"
[Aut::parse] tokenList = [ "d27" , "(and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "n0" , "s0.next" , "s1.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d25
[Aut::buildVmtNode] line = (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d26
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d20 s0 s1) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d20 s0 s1) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d20 s0 s1) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d20 s0 s1)
[Aut::buildVmtNode] root = d20
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)
[Aut::buildVmtNode] root = d27
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d24 s0 s1)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d24 s0 s1)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d24 s0 s1)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d24 s0 s1))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d24 s0 s1)
[Aut::buildVmtNode] root = d24
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=17
[Aut::buildParam] ++gflag=18
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) s0.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) s0.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) s0.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((s0 Bool)) Bool s0)"
[Aut::parse] tokenList = [ "d2" , "s0" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d2 s0)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d2 s0)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d2 s0)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d2 s0))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d2 s0)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=20
[Aut::buildParam] ++gflag=21
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s0) s1 (not s2)))"
[Aut::parse] tokenList = [ "d0" , "(and (not s0) s1 (not s2))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s0) s1 s2 (not s0.next) (not s1.next) s2.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s0) s1 s2 (not s0.next) (not s1.next) s2.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s0) s1 s2 (not s0.next) (not s1.next) s2.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s0 (not s1) (not s2) (not s0.next) s1.next s2.next))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s0 (not s1) (not s2) (not s0.next) s1.next s2.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s0 (not s1) (not s2) (not s0.next) s1.next s2.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s0 (not s1) s2 (not s0.next) (not s1.next) (not s2.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s0 (not s1) s2 (not s0.next) (not s1.next) (not s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s0 (not s1) s2 (not s0.next) (not s1.next) (not s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s0) s1 (not s2) s0.next (not s1.next) s2.next))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s0) s1 (not s2) s0.next (not s1.next) s2.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s0) s1 (not s2) s0.next (not s1.next) s2.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s0) (not s1) (not s2) s0.next (not s1.next) (not s2.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s0) (not s1) (not s2) s0.next (not s1.next) (not s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s0) (not s1) (not s2) s0.next (not s1.next) (not s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)))"
[Aut::parse] tokenList = [ "d6" , "(or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d5
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s0) (not s1) s2))"
[Aut::parse] tokenList = [ "d7" , "(and (not s0) (not s1) s2)" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0 s1 s2) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0 s1 s2) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0 s1 s2) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0 s1 s2)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d7 s0 s1 s2)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d7 s0 s1 s2)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d7 s0 s1 s2)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d7 s0 s1 s2))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d7 s0 s1 s2)
[Aut::buildVmtNode] root = d7
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=23
[Aut::buildParam] ++gflag=24
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x2 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x2 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x3 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x3 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x3 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x3" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x3 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x1 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not x1) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) (not x1) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x2 s0 s0.next) (d2 x0 x3 s0 s0.next) (d3 x0 x4 s0 s0.next) (d4 x0 x5 s0 s0.next) (d5 x0 x6 s0 s0.next) (d6 x0 x7 s0 s0.next) (d7 x0 x1 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x2 s0 s0.next) (d2 x0 x3 s0 s0.next) (d3 x0 x4 s0 s0.next) (d4 x0 x5 s0 s0.next) (d5 x0 x6 s0 s0.next) (d6 x0 x7 s0 s0.next) (d7 x0 x1 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x2 s0 s0.next) (d2 x0 x3 s0 s0.next) (d3 x0 x4 s0 s0.next) (d4 x0 x5 s0 s0.next) (d5 x0 x6 s0 s0.next) (d6 x0 x7 s0 s0.next) (d7 x0 x1 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x2 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x3 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x4 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x5 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x7 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x1 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d9 s0)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d9 s0)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d9 s0)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d9 s0))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=26
[Aut::buildParam] ++gflag=27
[Aut::buildVmtNode] line = (and (not s2) tmpI1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = tmpI1
[Aut::defineFun] name=tmp2 body=(and (= s2.next s2) (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] line = (and (= s2.next s2) (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not leftAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (not rightAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpT1
[Aut::defineFun] name=tmp3 body=(or (and (not s2) s2.next leftAngle) (and s2 (not s2.next) rightAngle))
[Aut::buildVmtNode] line = (or (and (not s2) s2.next leftAngle) (and s2 (not s2.next) rightAngle))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s2) s2.next leftAngle)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (and s2 (not s2.next) rightAngle)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = rightAngle
[Aut::defineFun] name=tmp4 body=(and (= s0.next s0) (= s1.next s1) (= n0.next n0) tmp3)
[Aut::buildVmtNode] line = (and (= s0.next s0) (= s1.next s1) (= n0.next n0) tmp3)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = (or tmp2 tmp4)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = (and (not s2) tmpO1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = tmpO1
[Aut::clearParam] ++gflag=28
[Aut::buildParam] ++gflag=29
[Aut::defineFun] name=tmp1 body=(and (not s1) tmpI2)
[Aut::buildVmtNode] line = (and (not s1) tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s1) (not s1.next) (not leftAngle) (not rightAngle) tmpT2)
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (not leftAngle) (not rightAngle) tmpT2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not leftAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (not rightAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpT2
[Aut::defineFun] name=tmp3 body=(and s1 s1.next (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] line = (and s1 s1.next (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not leftAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (not rightAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpT1
[Aut::defineFun] name=tmp4 body=(and (not s1) s1.next leftAngle tmpO2 I1_PARAM)
[Aut::buildVmtNode] line = (and (not s1) s1.next leftAngle tmpO2 I1_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = tmpO2
[Aut::buildVmtNode] line = I1_PARAM
[Aut::defineFun] name=tmp5 body=(and s1 (not s1.next) rightAngle tmpO1 I2_PARAM)
[Aut::buildVmtNode] line = (and s1 (not s1.next) rightAngle tmpO1 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp6 body=(or tmp2 tmp3 tmp4 tmp5)
[Aut::buildVmtNode] line = (or tmp2 tmp3 tmp4 tmp5)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = tmp5
[Aut::defineFun] name=T body=(! tmp6 :trans true)
[Aut::buildVmtNode] line = (! tmp6 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp6
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp7 body=(and (not s1) tmpO2)
[Aut::buildVmtNode] line = (and (not s1) tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp7) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp7) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp7
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=30
[Aut::buildParam] ++gflag=31
[Aut::clearParam] ++gflag=33
[Aut::buildParam] ++gflag=34
[Aut::defineFun] name=tmp1 body=(and tmpI1 tmpI2)
[Aut::buildVmtNode] line = (and tmpI1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = tmpI1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=T1_epsilon body=(or tmpT1 (and epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] line = (or tmpT1 (and epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmpT1
[Aut::buildVmtNode] line = (and epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::defineFun] name=T2_epsilon body=(or tmpT2 (and epsilon (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] line = (or tmpT2 (and epsilon (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmpT2
[Aut::buildVmtNode] line = (and epsilon (= s3.next s3) (= s4.next s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::defineFun] name=tmp2 body=(and T1_epsilon T2_epsilon)
[Aut::buildVmtNode] line = (and T1_epsilon T2_epsilon)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = T1_epsilon
[Aut::buildVmtNode] line = T2_epsilon
[Aut::defineFun] name=T body=(! tmp2 :trans true)
[Aut::buildVmtNode] line = (! tmp2 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp3 body=(and tmpO1 tmpO2)
[Aut::buildVmtNode] line = (and tmpO1 tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp3) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp3) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=35
[Aut::buildParam] ++gflag=36
[Aut::clearParam] ++gflag=38
[Aut::buildParam] ++gflag=39
[Aut::defineFun] name=tmp1 body=(and (not s8) tmpI1 tmpI2)
[Aut::buildVmtNode] line = (and (not s8) tmpI1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = tmpI1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s2) (not s2.next) tmpT1 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) tmpT1 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = tmpT1
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp3 body=(and (not s2) (not s2.next) epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp4 body=(and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next tmpT2)
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next tmpT2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpT2
[Aut::defineFun] name=tmp5 body=(and (not s2) s2.next epsilon T1_PARAM_1 s8 (not s8.next) I2_PARAM tmpO2)
[Aut::buildVmtNode] line = (and (not s2) s2.next epsilon T1_PARAM_1 s8 (not s8.next) I2_PARAM tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = T1_PARAM_1
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = I2_PARAM
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=tmp6 body=(and s2 s2.next epsilon T1_PARAM_2 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and s2 s2.next epsilon T1_PARAM_2 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = T1_PARAM_2
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp7 body=(and s2 (not s2.next) epsilon T1_PARAM_3 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and s2 (not s2.next) epsilon T1_PARAM_3 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = T1_PARAM_3
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp8 body=(or tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
[Aut::buildVmtNode] line = (or tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = tmp5
[Aut::buildVmtNode] line = tmp6
[Aut::buildVmtNode] line = tmp7
[Aut::defineFun] name=T body=(! tmp8 :trans true)
[Aut::buildVmtNode] line = (! tmp8 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp8
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp9 body=(and (not s8) tmpO1 tmpI2)
[Aut::buildVmtNode] line = (and (not s8) tmpO1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=O body=(! (not tmp9) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp9) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp9
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=40
[Aut::buildParam] ++gflag=41
write x_6 
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] epsilon 0x1e7ff00 MODULE 41
name=epsilon typeMODULE
and AND 41
   x0 INPUT 15
   not NOT 41
      x1 INPUT 15
   not NOT 41
      x2 INPUT 15
   not NOT 41
      x3 INPUT 15
   not NOT 41
      x4 INPUT 15
   not NOT 41
      x5 INPUT 15
   not NOT 41
      x6 INPUT 15
   not NOT 41
      x7 INPUT 15
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] leftAngle 0x1e80de0 MODULE 41
name=leftAngle typeMODULE
and AND 41
   x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] rightAngle 0x1e81b60 MODULE 41
name=rightAngle typeMODULE
and AND 41
   x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d0 0x1eb2470 MODULE 41
name=d0 typeMODULE
not NOT 41
   s0 STATE 15
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d1 0x1eb5300 MODULE 41
name=d1 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 15
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d2 0x1eb5fe0 MODULE 41
name=d2 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d3 0x1eb6c10 MODULE 41
name=d3 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d4 0x1eb7690 MODULE 41
name=d4 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d5 0x1eb8150 MODULE 41
name=d5 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d6 0x1eb8c20 MODULE 41
name=d6 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d7 0x1eb9880 MODULE 41
name=d7 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d8 0x1eba610 MODULE 41
name=d8 typeMODULE
or OR 41
   d1 MODULE 42
   d2 MODULE 42
   d3 MODULE 42
   d4 MODULE 42
   d5 MODULE 42
   d6 MODULE 42
   d7 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d9 0x1eba510 MODULE 41
name=d9 typeMODULE
not NOT 41
   s0 STATE 42
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d10 0x1ebbbf0 MODULE 41
name=d10 typeMODULE
not NOT 41
   s0 STATE 42
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d11 0x1ebbf30 MODULE 41
name=d11 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d12 0x1ebca20 MODULE 41
name=d12 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d13 0x1ebd680 MODULE 41
name=d13 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d14 0x1ebe030 MODULE 41
name=d14 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d15 0x1ebeb30 MODULE 41
name=d15 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d16 0x1ebf600 MODULE 41
name=d16 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d17 0x1ebb920 MODULE 41
name=d17 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   not NOT 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d18 0x1ec0f20 MODULE 41
name=d18 typeMODULE
or OR 41
   d11 MODULE 42
   d12 MODULE 42
   d13 MODULE 42
   d14 MODULE 42
   d15 MODULE 42
   d16 MODULE 42
   d17 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d19 0x1ec0e20 MODULE 41
name=d19 typeMODULE
not NOT 41
   s0 STATE 42
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d20 0x1ec2470 MODULE 41
name=d20 typeMODULE
or OR 41
   and AND 41
      not NOT 41
         s1 STATE 15
      d0 MODULE 42
   and AND 41
      s1 STATE 42
name=s1 0x1e968c0 type=STATE
      d10 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d21 0x1ec3080 MODULE 41
name=d21 typeMODULE
and AND 41
   not NOT 41
      s1 STATE 42
name=s1 0x1e968c0 type=STATE
   not NOT 41
      s1.next STATE_N 15
   d8 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d22 0x1ec3cc0 MODULE 41
name=d22 typeMODULE
and AND 41
   s1 STATE 42
name=s1 0x1e968c0 type=STATE
   s1.next STATE_N 42
name=s1.next 0x1e96a10 type=STATE_N
   d18 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d23 0x1ec43e0 MODULE 41
name=d23 typeMODULE
or OR 41
   d21 MODULE 42
   d22 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d24 0x1ec4b80 MODULE 41
name=d24 typeMODULE
or OR 41
   and AND 41
      not NOT 41
         s1 STATE 42
name=s1 0x1e968c0 type=STATE
      d9 MODULE 42
   and AND 41
      s1 STATE 42
name=s1 0x1e968c0 type=STATE
      d19 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d25 0x1ec5630 MODULE 41
name=d25 typeMODULE
and AND 41
   not NOT 41
      epsilon MODULE 42
   = EQ 41
      n0.next LEN_N 15
      + PLUS 41
         n0 LEN 15
         1 NUM 0
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d26 0x1ec6240 MODULE 41
name=d26 typeMODULE
and AND 41
   epsilon MODULE 42
   = EQ 41
      n0.next LEN_N 42
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 42
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d27 0x1ec6b40 MODULE 41
name=d27 typeMODULE
and AND 41
   d23 MODULE 42
   or OR 41
      d25 MODULE 42
      d26 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d28 0x1eb2f40 MODULE 41
name=d28 typeMODULE
and AND 41
   not NOT 41
      s2 STATE 0
   d20 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d29 0x1ed8000 MODULE 41
name=d29 typeMODULE
and AND 41
   = EQ 41
      s2.next STATE_N 0
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   not NOT 41
      leftAngle MODULE 42
   not NOT 41
      rightAngle MODULE 42
   d27 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d30 0x1ed94b0 MODULE 41
name=d30 typeMODULE
or OR 41
   and AND 41
      not NOT 41
         s2 STATE 42
name=s2 0x1ec9f10 type=STATE
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
      leftAngle MODULE 42
   and AND 41
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
      not NOT 41
         s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
      rightAngle MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d31 0x1ed9270 MODULE 41
name=d31 typeMODULE
and AND 41
   = EQ 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   = EQ 41
      s1.next STATE_N 42
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 42
name=s1 0x1e968c0 type=STATE
   = EQ 41
      n0.next LEN_N 42
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 42
name=n0 0x1ea4630 type=LEN
   d30 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d32 0x1ee0ac0 MODULE 41
name=d32 typeMODULE
or OR 41
   d29 MODULE 42
   d31 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d33 0x1ec0260 MODULE 41
name=d33 typeMODULE
and AND 41
   not NOT 41
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   d24 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d34 0x1eb3560 MODULE 41
name=d34 typeMODULE
not NOT 41
   s3 STATE 0
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d35 0x1eb3c50 MODULE 41
name=d35 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   s3.next STATE_N 0
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d36 0x1eb4220 MODULE 41
name=d36 typeMODULE
s3 STATE 42
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d37 0x1ece270 MODULE 41
name=d37 typeMODULE
not NOT 41
   s3 STATE 42
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d38 0x1ecf650 MODULE 41
name=d38 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d39 0x1ed9e60 MODULE 41
name=d39 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d40 0x1eda5d0 MODULE 41
name=d40 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d41 0x1edae40 MODULE 41
name=d41 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d42 0x1edb710 MODULE 41
name=d42 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d43 0x1edc000 MODULE 41
name=d43 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d44 0x1ece5d0 MODULE 41
name=d44 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   not NOT 41
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   not NOT 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d45 0x1edd6f0 MODULE 41
name=d45 typeMODULE
or OR 41
   d38 MODULE 42
   d39 MODULE 42
   d40 MODULE 42
   d41 MODULE 42
   d42 MODULE 42
   d43 MODULE 42
   d44 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d46 0x1edd630 MODULE 41
name=d46 typeMODULE
not NOT 41
   s3 STATE 42
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d47 0x1ee13c0 MODULE 41
name=d47 typeMODULE
and AND 41
   not NOT 41
      s4 STATE 0
   d37 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d48 0x1ee3a20 MODULE 41
name=d48 typeMODULE
and AND 41
   not NOT 41
      s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   not NOT 41
      s4.next STATE_N 0
   not NOT 41
      leftAngle MODULE 42
   not NOT 41
      rightAngle MODULE 42
   d45 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d49 0x1ee44c0 MODULE 41
name=d49 typeMODULE
and AND 41
   s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 42
name=s4.next 0x1ee80f0 type=STATE_N
   not NOT 41
      leftAngle MODULE 42
   not NOT 41
      rightAngle MODULE 42
   d35 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d50 0x1ee4be0 MODULE 41
name=d50 typeMODULE
and AND 41
   not NOT 41
      s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 42
name=s4.next 0x1ee80f0 type=STATE_N
   leftAngle MODULE 42
   d46 MODULE 42
   I1_PARAM PARAM 32
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d51 0x1ee5150 MODULE 41
name=d51 typeMODULE
and AND 41
   s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   not NOT 41
      s4.next STATE_N 42
name=s4.next 0x1ee80f0 type=STATE_N
   rightAngle MODULE 42
   d36 MODULE 42
   I2_PARAM PARAM 32
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d52 0x1ee50d0 MODULE 41
name=d52 typeMODULE
or OR 41
   d48 MODULE 42
   d49 MODULE 42
   d50 MODULE 42
   d51 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d53 0x1ee5e20 MODULE 41
name=d53 typeMODULE
and AND 41
   not NOT 41
      s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   d46 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d54 0x1ee8470 MODULE 41
name=d54 typeMODULE
and AND 41
   d28 MODULE 42
   d47 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d55 0x1ee9990 MODULE 41
name=d55 typeMODULE
or OR 41
   d32 MODULE 42
   and AND 41
      epsilon MODULE 42
      = EQ 41
         s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
         s0 STATE 42
name=s0 0x1e87ae0 type=STATE
      = EQ 41
         s1.next STATE_N 42
name=s1.next 0x1e96a10 type=STATE_N
         s1 STATE 42
name=s1 0x1e968c0 type=STATE
      = EQ 41
         s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
         s2 STATE 42
name=s2 0x1ec9f10 type=STATE
      = EQ 41
         n0.next LEN_N 42
name=n0.next 0x1e9e1f0 type=LEN_N
         n0 LEN 42
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d56 0x1ee9840 MODULE 41
name=d56 typeMODULE
or OR 41
   d52 MODULE 42
   and AND 41
      epsilon MODULE 42
      = EQ 41
         s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
         s3 STATE 42
name=s3 0x1ee6e70 type=STATE
      = EQ 41
         s4.next STATE_N 42
name=s4.next 0x1ee80f0 type=STATE_N
         s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d57 0x1eeab40 MODULE 41
name=d57 typeMODULE
and AND 41
   d55 MODULE 42
   d56 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d58 0x1eeb2b0 MODULE 41
name=d58 typeMODULE
and AND 41
   d33 MODULE 42
   d53 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d59 0x1eca420 MODULE 41
name=d59 typeMODULE
and AND 41
   not NOT 41
      s5 STATE 0
   s6 STATE 0
   not NOT 41
      s7 STATE 0
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d60 0x1ecaee0 MODULE 41
name=d60 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s5 STATE 42
name=s5 0x1eed870 type=STATE
   s6 STATE 42
name=s6 0x1eebde0 type=STATE
   s7 STATE 42
name=s7 0x1eebf60 type=STATE
   not NOT 41
      s5.next STATE_N 0
   not NOT 41
      s6.next STATE_N 0
   s7.next STATE_N 0
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d61 0x1ecab40 MODULE 41
name=d61 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   not NOT 41
      x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 42
name=s5 0x1eed870 type=STATE
   not NOT 41
      s6 STATE 42
name=s6 0x1eebde0 type=STATE
   not NOT 41
      s7 STATE 42
name=s7 0x1eebf60 type=STATE
   not NOT 41
      s5.next STATE_N 42
name=s5.next 0x1eec170 type=STATE_N
   s6.next STATE_N 42
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 42
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d62 0x1ed1910 MODULE 41
name=d62 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   not NOT 41
      x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 42
name=s5 0x1eed870 type=STATE
   not NOT 41
      s6 STATE 42
name=s6 0x1eebde0 type=STATE
   s7 STATE 42
name=s7 0x1eebf60 type=STATE
   not NOT 41
      s5.next STATE_N 42
name=s5.next 0x1eec170 type=STATE_N
   not NOT 41
      s6.next STATE_N 42
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 41
      s7.next STATE_N 42
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d63 0x1ed2c30 MODULE 41
name=d63 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   not NOT 41
      x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s5 STATE 42
name=s5 0x1eed870 type=STATE
   s6 STATE 42
name=s6 0x1eebde0 type=STATE
   not NOT 41
      s7 STATE 42
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 42
name=s5.next 0x1eec170 type=STATE_N
   not NOT 41
      s6.next STATE_N 42
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 42
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d64 0x1ed2ba0 MODULE 41
name=d64 typeMODULE
and AND 41
   not NOT 41
      x0 INPUT 42
name=x0 0x1e7ef60 type=INPUT
   not NOT 41
      x1 INPUT 42
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 42
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 42
name=x3 0x1e7f490 type=INPUT
   not NOT 41
      x4 INPUT 42
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 42
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 42
name=x6 0x1e7f930 type=INPUT
   not NOT 41
      x7 INPUT 42
name=x7 0x1e7fab0 type=INPUT
   not NOT 41
      s5 STATE 42
name=s5 0x1eed870 type=STATE
   not NOT 41
      s6 STATE 42
name=s6 0x1eebde0 type=STATE
   not NOT 41
      s7 STATE 42
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 42
name=s5.next 0x1eec170 type=STATE_N
   not NOT 41
      s6.next STATE_N 42
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 41
      s7.next STATE_N 42
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d65 0x1ed5210 MODULE 41
name=d65 typeMODULE
or OR 41
   d60 MODULE 42
   d61 MODULE 42
   d62 MODULE 42
   d63 MODULE 42
   d64 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d66 0x1ed50f0 MODULE 41
name=d66 typeMODULE
and AND 41
   not NOT 41
      s5 STATE 42
name=s5 0x1eed870 type=STATE
   not NOT 41
      s6 STATE 42
name=s6 0x1eebde0 type=STATE
   s7 STATE 42
name=s7 0x1eebf60 type=STATE
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d67 0x1ef0500 MODULE 41
name=d67 typeMODULE
and AND 41
   not NOT 41
      s8 STATE 0
   d54 MODULE 42
   d59 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d68 0x1ef1030 MODULE 41
name=d68 typeMODULE
and AND 41
   not NOT 41
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   not NOT 41
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
   d57 MODULE 42
   not NOT 41
      s8 STATE 42
name=s8 0x1eece40 type=STATE
   not NOT 41
      s8.next STATE_N 0
   d59 MODULE 42
   I2_PARAM PARAM 0
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d69 0x1ef0f00 MODULE 41
name=d69 typeMODULE
and AND 41
   not NOT 41
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   not NOT 41
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 42
   = EQ 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   = EQ 41
      s1.next STATE_N 42
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 42
name=s1 0x1e968c0 type=STATE
   = EQ 41
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   = EQ 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   = EQ 41
      s4.next STATE_N 42
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   = EQ 41
      n0.next LEN_N 42
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 42
name=n0 0x1ea4630 type=LEN
   not NOT 41
      s8 STATE 42
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 42
name=s8.next 0x1eecf90 type=STATE_N
   d59 MODULE 42
   I2_PARAM PARAM 42
name=I2_PARAM 0x1eeecd0 type=PARAM
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d70 0x1ef3230 MODULE 41
name=d70 typeMODULE
and AND 41
   not NOT 41
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   not NOT 41
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
   = EQ 41
      s0.next STATE_N 42
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 42
name=s0 0x1e87ae0 type=STATE
   = EQ 41
      s1.next STATE_N 42
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 42
name=s1 0x1e968c0 type=STATE
   = EQ 41
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   = EQ 41
      s3.next STATE_N 42
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 42
name=s3 0x1ee6e70 type=STATE
   = EQ 41
      s4.next STATE_N 42
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 42
name=s4 0x1ee6fc0 type=STATE
   = EQ 41
      n0.next LEN_N 42
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 42
name=n0 0x1ea4630 type=LEN
   s8 STATE 42
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 42
name=s8.next 0x1eecf90 type=STATE_N
   d65 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d71 0x1ef1bc0 MODULE 41
name=d71 typeMODULE
and AND 41
   not NOT 41
      s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 42
   T1_PARAM_1 PARAM 0
   s8 STATE 42
name=s8 0x1eece40 type=STATE
   not NOT 41
      s8.next STATE_N 42
name=s8.next 0x1eecf90 type=STATE_N
   I2_PARAM PARAM 42
name=I2_PARAM 0x1eeecd0 type=PARAM
   d66 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d72 0x1ef4620 MODULE 41
name=d72 typeMODULE
and AND 41
   s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 42
   T1_PARAM_2 PARAM 0
   not NOT 41
      s8 STATE 42
name=s8 0x1eece40 type=STATE
   not NOT 41
      s8.next STATE_N 42
name=s8.next 0x1eecf90 type=STATE_N
   d59 MODULE 42
   I2_PARAM PARAM 42
name=I2_PARAM 0x1eeecd0 type=PARAM
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d73 0x1ef1ab0 MODULE 41
name=d73 typeMODULE
and AND 41
   s2 STATE 42
name=s2 0x1ec9f10 type=STATE
   not NOT 41
      s2.next STATE_N 42
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 42
   T1_PARAM_3 PARAM 0
   not NOT 41
      s8 STATE 42
name=s8 0x1eece40 type=STATE
   not NOT 41
      s8.next STATE_N 42
name=s8.next 0x1eecf90 type=STATE_N
   d59 MODULE 42
   I2_PARAM PARAM 42
name=I2_PARAM 0x1eeecd0 type=PARAM
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d74 0x1ef4580 MODULE 41
name=d74 typeMODULE
or OR 41
   d68 MODULE 42
   d69 MODULE 42
   d70 MODULE 42
   d71 MODULE 42
   d72 MODULE 42
   d73 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] d75 0x1ef5d30 MODULE 41
name=d75 typeMODULE
and AND 41
   not NOT 41
      s8 STATE 42
name=s8 0x1eece40 type=STATE
   d58 MODULE 42
   d59 MODULE 42
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] I 0x1ef0950 MODULE 41
! EXCM 41
   d67 MODULE 42
   :init SPECIAL 0
   true CONST1 15
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] T 0x1ef57e0 MODULE 41
! EXCM 41
   d74 MODULE 42
   :trans SPECIAL 0
   true CONST1 42
name=true 0x1e7fd80 type=CONST1
[Aut::writeDefineFun] gflag=42
[Aut::writeDefineFun] O 0x1ef6230 MODULE 41
! EXCM 41
   not NOT 41
      d75 MODULE 42
   :invar-property SPECIAL 0
   0 NUM 0
concate literal_7 x_6 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3 () Bool)"
[Aut::parse] tokenList = [ "s3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3.next () Bool)"
[Aut::parse] tokenList = [ "s3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4 () Bool)"
[Aut::parse] tokenList = [ "s4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4.next () Bool)"
[Aut::parse] tokenList = [ "s4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s0) (not s1) s2 (not s3) (not s4)))"
[Aut::parse] tokenList = [ "d0" , "(and (not s0) (not s1) s2 (not s3) (not s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2 (not s3) (not s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next))"
[Aut::parse] tokenList = [ "d8" , "(and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next))"
[Aut::parse] tokenList = [ "d9" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d10" , "(and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d18" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)))"
[Aut::parse] tokenList = [ "d19" , "(or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d7
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d10
[Aut::buildVmtNode] line = (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d17
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s0) s1 (not s2) (not s3) (not s4)))"
[Aut::parse] tokenList = [ "d20" , "(and (not s0) s1 (not s2) (not s3) (not s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2) (not s3) (not s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0 s1 s2 s3 s4) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0 s1 s2 s3 s4) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0 s1 s2 s3 s4) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d19
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d20 s0 s1 s2 s3 s4)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d20 s0 s1 s2 s3 s4)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d20 s0 s1 s2 s3 s4)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d20 s0 s1 s2 s3 s4))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d20 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d20
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=44
[Aut::buildParam] ++gflag=45
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y0 () Bool)"
[Aut::parse] tokenList = [ "y0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y0.next () Bool)"
[Aut::parse] tokenList = [ "y0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y1 () Bool)"
[Aut::parse] tokenList = [ "y1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y1.next () Bool)"
[Aut::parse] tokenList = [ "y1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y2 () Bool)"
[Aut::parse] tokenList = [ "y2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y2.next () Bool)"
[Aut::parse] tokenList = [ "y2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y3 () Bool)"
[Aut::parse] tokenList = [ "y3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y3.next () Bool)"
[Aut::parse] tokenList = [ "y3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y4 () Bool)"
[Aut::parse] tokenList = [ "y4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y4.next () Bool)"
[Aut::parse] tokenList = [ "y4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y5 () Bool)"
[Aut::parse] tokenList = [ "y5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y5.next () Bool)"
[Aut::parse] tokenList = [ "y5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y6 () Bool)"
[Aut::parse] tokenList = [ "y6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y6.next () Bool)"
[Aut::parse] tokenList = [ "y6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y7 () Bool)"
[Aut::parse] tokenList = [ "y7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y7.next () Bool)"
[Aut::parse] tokenList = [ "y7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3 () Bool)"
[Aut::parse] tokenList = [ "s3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3.next () Bool)"
[Aut::parse] tokenList = [ "s3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4 () Bool)"
[Aut::parse] tokenList = [ "s4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4.next () Bool)"
[Aut::parse] tokenList = [ "s4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5 () Bool)"
[Aut::parse] tokenList = [ "s5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5.next () Bool)"
[Aut::parse] tokenList = [ "s5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6 () Bool)"
[Aut::parse] tokenList = [ "s6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6.next () Bool)"
[Aut::parse] tokenList = [ "s6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7 () Bool)"
[Aut::parse] tokenList = [ "s7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7.next () Bool)"
[Aut::parse] tokenList = [ "s7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8 () Bool)"
[Aut::parse] tokenList = [ "s8" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8.next () Bool)"
[Aut::parse] tokenList = [ "s8.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0 () Int)"
[Aut::parse] tokenList = [ "n0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0.next () Int)"
[Aut::parse] tokenList = [ "n0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))"
[Aut::parse] tokenList = [ "epsilon" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun leftAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7))"
[Aut::parse] tokenList = [ "leftAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun rightAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7)))"
[Aut::parse] tokenList = [ "rightAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d10" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d18" , "(or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d11 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d17
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d19" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d0 s0)) (and s1 (d10 s0))))"
[Aut::parse] tokenList = [ "d20" , "(or (and (not s1) (d0 s0)) (and s1 (d10 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d0 s0)) (and s1 (d10 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d0 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = (and s1 (d10 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d10 s0)
[Aut::buildVmtNode] root = d10
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d21" , "(and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d23" , "(or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d22
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d9 s0)) (and s1 (d19 s0))))"
[Aut::parse] tokenList = [ "d24" , "(or (and (not s1) (d9 s0)) (and s1 (d19 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d9 s0)) (and s1 (d19 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d9 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (and s1 (d19 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d19 s0)
[Aut::buildVmtNode] root = d19
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))"
[Aut::parse] tokenList = [ "d25" , "(and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d26" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (n0.next Int)) Bool (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))"
[Aut::parse] tokenList = [ "d27" , "(and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "n0" , "s0.next" , "s1.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d25
[Aut::buildVmtNode] line = (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d26
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d28 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d20 s0 s1)))"
[Aut::parse] tokenList = [ "d28" , "(and (not s2) (d20 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d20 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d20 s0 s1)
[Aut::buildVmtNode] root = d20
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)))"
[Aut::parse] tokenList = [ "d29" , "(and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)
[Aut::buildVmtNode] root = d27
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))))"
[Aut::parse] tokenList = [ "d30" , "(or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s2" , "s2.next" ]
[Aut::buildVmtNode] line = (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))"
[Aut::parse] tokenList = [ "d31" , "(and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)
[Aut::buildVmtNode] root = d30
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)))"
[Aut::parse] tokenList = [ "d32" , "(or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d29
[Aut::buildVmtNode] line = (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d31
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d33 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d24 s0 s1)))"
[Aut::parse] tokenList = [ "d33" , "(and (not s2) (d24 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d24 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d24 s0 s1)
[Aut::buildVmtNode] root = d24
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d34 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d34" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d35 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next))"
[Aut::parse] tokenList = [ "d35" , "(and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d36 ((s3 Bool)) Bool s3)"
[Aut::parse] tokenList = [ "d36" , "s3" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d37 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d37" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d38 ((x0 Bool) (x2 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x2 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d38" , "(and (not x0) x2 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d39 ((x0 Bool) (x3 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d39" , "(and (not x0) x3 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x3" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x3 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d40 ((x0 Bool) (x4 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x4 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d40" , "(and (not x0) x4 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x4" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x4 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d41 ((x0 Bool) (x5 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x5 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d41" , "(and (not x0) x5 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x5" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x5 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d42 ((x0 Bool) (x6 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x6 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d42" , "(and (not x0) x6 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x6" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x6 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d43 ((x0 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x7 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d43" , "(and (not x0) x7 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x7 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d44 ((x0 Bool) (x1 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x1) (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d44" , "(and (not x0) (not x1) (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d38 x0 x2 s3 s3.next) (d39 x0 x3 s3 s3.next) (d40 x0 x4 s3 s3.next) (d41 x0 x5 s3 s3.next) (d42 x0 x6 s3 s3.next) (d43 x0 x7 s3 s3.next) (d44 x0 x1 s3 s3.next)))"
[Aut::parse] tokenList = [ "d45" , "(or (d38 x0 x2 s3 s3.next) (d39 x0 x3 s3 s3.next) (d40 x0 x4 s3 s3.next) (d41 x0 x5 s3 s3.next) (d42 x0 x6 s3 s3.next) (d43 x0 x7 s3 s3.next) (d44 x0 x1 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (or (d38 x0 x2 s3 s3.next) (d39 x0 x3 s3 s3.next) (d40 x0 x4 s3 s3.next) (d41 x0 x5 s3 s3.next) (d42 x0 x6 s3 s3.next) (d43 x0 x7 s3 s3.next) (d44 x0 x1 s3 s3.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d38 x0 x2 s3 s3.next)
[Aut::buildVmtNode] root = d38
[Aut::buildVmtNode] line = (d39 x0 x3 s3 s3.next)
[Aut::buildVmtNode] root = d39
[Aut::buildVmtNode] line = (d40 x0 x4 s3 s3.next)
[Aut::buildVmtNode] root = d40
[Aut::buildVmtNode] line = (d41 x0 x5 s3 s3.next)
[Aut::buildVmtNode] root = d41
[Aut::buildVmtNode] line = (d42 x0 x6 s3 s3.next)
[Aut::buildVmtNode] root = d42
[Aut::buildVmtNode] line = (d43 x0 x7 s3 s3.next)
[Aut::buildVmtNode] root = d43
[Aut::buildVmtNode] line = (d44 x0 x1 s3 s3.next)
[Aut::buildVmtNode] root = d44
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d46 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d46" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d47 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d37 s3)))"
[Aut::parse] tokenList = [ "d47" , "(and (not s4) (d37 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d37 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d37 s3)
[Aut::buildVmtNode] root = d37
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d48" , "(and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d45
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d49" , "(and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d35
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d46 s3) (d34 s3.next)))"
[Aut::parse] tokenList = [ "d50" , "(and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d46 s3) (d34 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d46 s3) (d34 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (d46 s3)
[Aut::buildVmtNode] root = d46
[Aut::buildVmtNode] line = (d34 s3.next)
[Aut::buildVmtNode] root = d34
[Aut::buildVmtNode] d34 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d36 s3) (d37 s3.next)))"
[Aut::parse] tokenList = [ "d51" , "(and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d36 s3) (d37 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d36 s3) (d37 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d36 s3)
[Aut::buildVmtNode] root = d36
[Aut::buildVmtNode] line = (d37 s3.next)
[Aut::buildVmtNode] root = d37
[Aut::buildVmtNode] d37 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d52" , "(or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d48
[Aut::buildVmtNode] line = (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d49
[Aut::buildVmtNode] line = (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d50
[Aut::buildVmtNode] line = (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d51
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d53 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d46 s3)))"
[Aut::parse] tokenList = [ "d53" , "(and (not s4) (d46 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d46 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d46 s3)
[Aut::buildVmtNode] root = d46
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d54 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d28 s0 s1 s2) (d47 s3 s4)))"
[Aut::parse] tokenList = [ "d54" , "(and (d28 s0 s1 s2) (d47 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d28 s0 s1 s2) (d47 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d28 s0 s1 s2)
[Aut::buildVmtNode] root = d28
[Aut::buildVmtNode] line = (d47 s3 s4)
[Aut::buildVmtNode] root = d47
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))))"
[Aut::parse] tokenList = [ "d55" , "(or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d32
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))))"
[Aut::parse] tokenList = [ "d56" , "(or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d52
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d57" , "(and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d55
[Aut::buildVmtNode] line = (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d56
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d58 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d33 s0 s1 s2) (d53 s3 s4)))"
[Aut::parse] tokenList = [ "d58" , "(and (d33 s0 s1 s2) (d53 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d33 s0 s1 s2) (d53 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d33 s0 s1 s2)
[Aut::buildVmtNode] root = d33
[Aut::buildVmtNode] line = (d53 s3 s4)
[Aut::buildVmtNode] root = d53
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d59 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) s6 (not s7)))"
[Aut::parse] tokenList = [ "d59" , "(and (not s5) s6 (not s7))" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) s6 (not s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d60 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d60" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d61 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next))"
[Aut::parse] tokenList = [ "d61" , "(and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d62 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d62" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d63" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d64 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d64" , "(and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d65 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d65" , "(or (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (or (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d60
[Aut::buildVmtNode] line = (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d61
[Aut::buildVmtNode] line = (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d62
[Aut::buildVmtNode] line = (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d63
[Aut::buildVmtNode] line = (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d64
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d66 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) (not s6) s7))"
[Aut::parse] tokenList = [ "d66" , "(and (not s5) (not s6) s7)" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) (not s6) s7)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d67 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d54 s0 s1 s2 s3 s4) (d59 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d67" , "(and (not s8) (d54 s0 s1 s2 s3 s4) (d59 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d54 s0 s1 s2 s3 s4) (d59 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d54 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d54
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d68 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d68" , "(and (not s2) (not s2.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d69" , "(and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d70" , "(and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d65
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d59 s5.next s6.next s7.next) (d66 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d71" , "(and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d59 s5.next s6.next s7.next) (d66 s5 s6 s7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d59 s5.next s6.next s7.next) (d66 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] d57 PARAM
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::buildVmtNode] line = (d66 s5 s6 s7)
[Aut::buildVmtNode] root = d66
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d72 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y0 Bool) (y1 Bool) (y2 Bool) (y3 Bool) (y4 Bool) (y5 Bool) (y6 Bool) (y7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d72" , "(and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y0" , "y1" , "y2" , "y3" , "y4" , "y5" , "y6" , "y7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d57 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] d57 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d73 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d73" , "(and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] d57 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d74 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y0 Bool) (y1 Bool) (y2 Bool) (y3 Bool) (y4 Bool) (y5 Bool) (y6 Bool) (y7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)))"
[Aut::parse] tokenList = [ "d74" , "(or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y0" , "y1" , "y2" , "y3" , "y4" , "y5" , "y6" , "y7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d68
[Aut::buildVmtNode] line = (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d69
[Aut::buildVmtNode] line = (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d70
[Aut::buildVmtNode] line = (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d71
[Aut::buildVmtNode] line = (d72 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d72
[Aut::buildVmtNode] line = (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d73
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d75 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d58 s0 s1 s2 s3 s4) (d59 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d75" , "(and (not s8) (d58 s0 s1 s2 s3 s4) (d59 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d58 s0 s1 s2 s3 s4) (d59 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d58 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d58
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8)
[Aut::buildVmtNode] root = d67
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d74 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d74 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d74 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d74 x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d74
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)
[Aut::buildVmtNode] root = d75
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=47
[Aut::buildParam] ++gflag=48
[Aut::defineFun] name=tmp1 body=(and (not s9) tmpI1)
[Aut::buildVmtNode] line = (and (not s9) tmpI1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = tmpI1
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s9) (not s9.next) tmpT1 (= n0.next n0))
[Aut::buildVmtNode] line = (and (not s9) (not s9.next) tmpT1 (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (not s9.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = tmpT1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::defineFun] name=tmp3 body=(and s9 s9.next tmpT2)
[Aut::buildVmtNode] line = (and s9 s9.next tmpT2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = tmpT2
[Aut::defineFun] name=tmp4 body=(and epsilon (not s9) s9.next tmpO1 I2_PARAM (= n0.next n0))
[Aut::buildVmtNode] line = (and epsilon (not s9) s9.next tmpO1 I2_PARAM (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = I2_PARAM
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::defineFun] name=tmp5 body=(or tmp2 tmp3 tmp4)
[Aut::buildVmtNode] line = (or tmp2 tmp3 tmp4)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = tmp4
[Aut::defineFun] name=T body=(! tmp5 :trans true)
[Aut::buildVmtNode] line = (! tmp5 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp5
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp6 body=(and s9 tmpO2)
[Aut::buildVmtNode] line = (and s9 tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp6) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp6) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp6
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=49
[Aut::buildParam] ++gflag=50
write x_8 
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] epsilon 0x1e7ff00 MODULE 50
name=epsilon typeMODULE
and AND 50
   x0 INPUT 42
   not NOT 50
      x1 INPUT 42
   not NOT 50
      x2 INPUT 42
   not NOT 50
      x3 INPUT 42
   not NOT 50
      x4 INPUT 42
   not NOT 50
      x5 INPUT 42
   not NOT 50
      x6 INPUT 42
   not NOT 50
      x7 INPUT 42
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] leftAngle 0x1e80de0 MODULE 50
name=leftAngle typeMODULE
and AND 50
   x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] rightAngle 0x1e81b60 MODULE 50
name=rightAngle typeMODULE
and AND 50
   x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d0 0x1ef7d30 MODULE 50
name=d0 typeMODULE
and AND 50
   not NOT 50
      s0 STATE 42
   not NOT 50
      s1 STATE 42
   s2 STATE 42
   not NOT 50
      s3 STATE 42
   not NOT 50
      s4 STATE 42
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d1 0x1efcfd0 MODULE 50
name=d1 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 42
   not NOT 50
      s1.next STATE_N 42
   s2.next STATE_N 42
   s3.next STATE_N 42
   s4.next STATE_N 42
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d2 0x1efcb30 MODULE 50
name=d2 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d3 0x1efcaa0 MODULE 50
name=d3 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d4 0x1f010f0 MODULE 50
name=d4 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d5 0x1f02560 MODULE 50
name=d5 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d6 0x1f037a0 MODULE 50
name=d6 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d7 0x1f04d60 MODULE 50
name=d7 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d8 0x1f06180 MODULE 50
name=d8 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d9 0x1f07650 MODULE 50
name=d9 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d10 0x1f08ba0 MODULE 50
name=d10 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d11 0x1f0a2e0 MODULE 50
name=d11 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d12 0x1f0ba20 MODULE 50
name=d12 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d13 0x1f0d140 MODULE 50
name=d13 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d14 0x1eff9f0 MODULE 50
name=d14 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d15 0x1f101a0 MODULE 50
name=d15 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d16 0x1f11e00 MODULE 50
name=d16 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d17 0x1f075c0 MODULE 50
name=d17 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d18 0x1f0e580 MODULE 50
name=d18 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d19 0x1f14650 MODULE 50
name=d19 typeMODULE
or OR 50
   d1 MODULE 51
   d2 MODULE 51
   d3 MODULE 51
   d4 MODULE 51
   d5 MODULE 51
   d6 MODULE 51
   d7 MODULE 51
   d8 MODULE 51
   d9 MODULE 51
   d10 MODULE 51
   d11 MODULE 51
   d12 MODULE 51
   d13 MODULE 51
   d14 MODULE 51
   d15 MODULE 51
   d16 MODULE 51
   d17 MODULE 51
   d18 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d20 0x1f16520 MODULE 50
name=d20 typeMODULE
and AND 50
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d21 0x1f1fb20 MODULE 50
name=d21 typeMODULE
not NOT 50
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d22 0x1f1fe30 MODULE 50
name=d22 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d23 0x1f20aa0 MODULE 50
name=d23 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d24 0x1f21610 MODULE 50
name=d24 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d25 0x1f220f0 MODULE 50
name=d25 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d26 0x1f22bb0 MODULE 50
name=d26 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d27 0x1f23680 MODULE 50
name=d27 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d28 0x1f242e0 MODULE 50
name=d28 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d29 0x1f25070 MODULE 50
name=d29 typeMODULE
or OR 50
   d22 MODULE 51
   d23 MODULE 51
   d24 MODULE 51
   d25 MODULE 51
   d26 MODULE 51
   d27 MODULE 51
   d28 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d30 0x1f24f70 MODULE 50
name=d30 typeMODULE
not NOT 50
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d31 0x1f26590 MODULE 50
name=d31 typeMODULE
not NOT 50
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d32 0x1f26930 MODULE 50
name=d32 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d33 0x1f27480 MODULE 50
name=d33 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d34 0x1f280e0 MODULE 50
name=d34 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d35 0x1f28b50 MODULE 50
name=d35 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d36 0x1f295f0 MODULE 50
name=d36 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d37 0x1f2a0c0 MODULE 50
name=d37 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d38 0x1f262c0 MODULE 50
name=d38 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   not NOT 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d39 0x1f2b9e0 MODULE 50
name=d39 typeMODULE
or OR 50
   d32 MODULE 51
   d33 MODULE 51
   d34 MODULE 51
   d35 MODULE 51
   d36 MODULE 51
   d37 MODULE 51
   d38 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d40 0x1f2b8e0 MODULE 50
name=d40 typeMODULE
not NOT 50
   s0 STATE 51
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d41 0x1f2cf30 MODULE 50
name=d41 typeMODULE
or OR 50
   and AND 50
      not NOT 50
         s1 STATE 51
name=s1 0x1e968c0 type=STATE
      d21 MODULE 51
   and AND 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
      d31 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d42 0x1f2db40 MODULE 50
name=d42 typeMODULE
and AND 50
   not NOT 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   not NOT 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   d29 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d43 0x1f2e780 MODULE 50
name=d43 typeMODULE
and AND 50
   s1 STATE 51
name=s1 0x1e968c0 type=STATE
   s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
   d39 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d44 0x1f2eea0 MODULE 50
name=d44 typeMODULE
or OR 50
   d42 MODULE 51
   d43 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d45 0x1f2f640 MODULE 50
name=d45 typeMODULE
or OR 50
   and AND 50
      not NOT 50
         s1 STATE 51
name=s1 0x1e968c0 type=STATE
      d30 MODULE 51
   and AND 50
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
      d40 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d46 0x1f300f0 MODULE 50
name=d46 typeMODULE
and AND 50
   not NOT 50
      epsilon MODULE 51
   = EQ 50
      n0.next LEN_N 42
      + PLUS 50
         n0 LEN 42
         1 NUM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d47 0x1f30d00 MODULE 50
name=d47 typeMODULE
and AND 50
   epsilon MODULE 51
   = EQ 50
      n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 51
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d48 0x1f31600 MODULE 50
name=d48 typeMODULE
and AND 50
   d44 MODULE 51
   or OR 50
      d46 MODULE 51
      d47 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d49 0x1f31580 MODULE 50
name=d49 typeMODULE
and AND 50
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   d41 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d50 0x1f24df0 MODULE 50
name=d50 typeMODULE
and AND 50
   = EQ 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      leftAngle MODULE 51
   not NOT 50
      rightAngle MODULE 51
   d48 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d51 0x1f339a0 MODULE 50
name=d51 typeMODULE
or OR 50
   and AND 50
      not NOT 50
         s2 STATE 51
name=s2 0x1ec9f10 type=STATE
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
      leftAngle MODULE 51
   and AND 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
      not NOT 50
         s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
      rightAngle MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d52 0x1f346b0 MODULE 50
name=d52 typeMODULE
and AND 50
   = EQ 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   = EQ 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   = EQ 50
      n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 51
name=n0 0x1ea4630 type=LEN
   d51 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d53 0x1f24d20 MODULE 50
name=d53 typeMODULE
or OR 50
   d50 MODULE 51
   d52 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d54 0x1f35350 MODULE 50
name=d54 typeMODULE
and AND 50
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   d45 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d55 0x1f363b0 MODULE 50
name=d55 typeMODULE
not NOT 50
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d56 0x1f366f0 MODULE 50
name=d56 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d57 0x1f36670 MODULE 50
name=d57 typeMODULE
s3 STATE 51
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d58 0x1f377e0 MODULE 50
name=d58 typeMODULE
not NOT 50
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d59 0x1f37b70 MODULE 50
name=d59 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d60 0x1f383a0 MODULE 50
name=d60 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d61 0x1f38c70 MODULE 50
name=d61 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d62 0x1f39540 MODULE 50
name=d62 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d63 0x1f39e10 MODULE 50
name=d63 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d64 0x1f3a6e0 MODULE 50
name=d64 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d65 0x1f3afb0 MODULE 50
name=d65 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   not NOT 50
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   not NOT 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d66 0x1f3bc10 MODULE 50
name=d66 typeMODULE
or OR 50
   d59 MODULE 51
   d60 MODULE 51
   d61 MODULE 51
   d62 MODULE 51
   d63 MODULE 51
   d64 MODULE 51
   d65 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d67 0x1f3bb40 MODULE 50
name=d67 typeMODULE
not NOT 50
   s3 STATE 51
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d68 0x1f3d020 MODULE 50
name=d68 typeMODULE
and AND 50
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   d58 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d69 0x1f3d810 MODULE 50
name=d69 typeMODULE
and AND 50
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
   not NOT 50
      leftAngle MODULE 51
   not NOT 50
      rightAngle MODULE 51
   d66 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d70 0x1f3eb40 MODULE 50
name=d70 typeMODULE
and AND 50
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
   not NOT 50
      leftAngle MODULE 51
   not NOT 50
      rightAngle MODULE 51
   d56 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d71 0x1f3f870 MODULE 50
name=d71 typeMODULE
and AND 50
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
   leftAngle MODULE 51
   d67 MODULE 51
   d34 PARAM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d72 0x1f40290 MODULE 50
name=d72 typeMODULE
and AND 50
   s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   not NOT 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
   rightAngle MODULE 51
   d57 MODULE 51
   d37 PARAM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d73 0x1f3d750 MODULE 50
name=d73 typeMODULE
or OR 50
   d69 MODULE 51
   d70 MODULE 51
   d71 MODULE 51
   d72 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d74 0x1f40dc0 MODULE 50
name=d74 typeMODULE
and AND 50
   not NOT 50
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   d67 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d75 0x1f41280 MODULE 50
name=d75 typeMODULE
and AND 50
   d49 MODULE 51
   d68 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d76 0x1f426a0 MODULE 50
name=d76 typeMODULE
or OR 50
   d53 MODULE 51
   and AND 50
      epsilon MODULE 51
      = EQ 50
         s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
         s0 STATE 51
name=s0 0x1e87ae0 type=STATE
      = EQ 50
         s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
         s1 STATE 51
name=s1 0x1e968c0 type=STATE
      = EQ 50
         s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
         s2 STATE 51
name=s2 0x1ec9f10 type=STATE
      = EQ 50
         n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
         n0 LEN 51
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d77 0x1f438a0 MODULE 50
name=d77 typeMODULE
or OR 50
   d73 MODULE 51
   and AND 50
      epsilon MODULE 51
      = EQ 50
         s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
         s3 STATE 51
name=s3 0x1ee6e70 type=STATE
      = EQ 50
         s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
         s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d78 0x1f24eb0 MODULE 50
name=d78 typeMODULE
and AND 50
   d76 MODULE 51
   d77 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d79 0x1f451c0 MODULE 50
name=d79 typeMODULE
and AND 50
   d54 MODULE 51
   d74 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d80 0x1f45850 MODULE 50
name=d80 typeMODULE
and AND 50
   not NOT 50
      s5 STATE 42
   s6 STATE 42
   not NOT 50
      s7 STATE 42
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d81 0x1f45ec0 MODULE 50
name=d81 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s5 STATE 51
name=s5 0x1eed870 type=STATE
   s6 STATE 51
name=s6 0x1eebde0 type=STATE
   s7 STATE 51
name=s7 0x1eebf60 type=STATE
   not NOT 50
      s5.next STATE_N 42
   not NOT 50
      s6.next STATE_N 42
   s7.next STATE_N 42
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d82 0x1f46a60 MODULE 50
name=d82 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   not NOT 50
      x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 51
name=s5 0x1eed870 type=STATE
   not NOT 50
      s6 STATE 51
name=s6 0x1eebde0 type=STATE
   not NOT 50
      s7 STATE 51
name=s7 0x1eebf60 type=STATE
   not NOT 50
      s5.next STATE_N 51
name=s5.next 0x1eec170 type=STATE_N
   s6.next STATE_N 51
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 51
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d83 0x1f47bc0 MODULE 50
name=d83 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   not NOT 50
      x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 51
name=s5 0x1eed870 type=STATE
   not NOT 50
      s6 STATE 51
name=s6 0x1eebde0 type=STATE
   s7 STATE 51
name=s7 0x1eebf60 type=STATE
   not NOT 50
      s5.next STATE_N 51
name=s5.next 0x1eec170 type=STATE_N
   not NOT 50
      s6.next STATE_N 51
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 50
      s7.next STATE_N 51
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d84 0x1f48f10 MODULE 50
name=d84 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   not NOT 50
      x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s5 STATE 51
name=s5 0x1eed870 type=STATE
   s6 STATE 51
name=s6 0x1eebde0 type=STATE
   not NOT 50
      s7 STATE 51
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 51
name=s5.next 0x1eec170 type=STATE_N
   not NOT 50
      s6.next STATE_N 51
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 51
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d85 0x1f4a0c0 MODULE 50
name=d85 typeMODULE
and AND 50
   not NOT 50
      x0 INPUT 51
name=x0 0x1e7ef60 type=INPUT
   not NOT 50
      x1 INPUT 51
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 51
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 51
name=x3 0x1e7f490 type=INPUT
   not NOT 50
      x4 INPUT 51
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 51
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 51
name=x6 0x1e7f930 type=INPUT
   not NOT 50
      x7 INPUT 51
name=x7 0x1e7fab0 type=INPUT
   not NOT 50
      s5 STATE 51
name=s5 0x1eed870 type=STATE
   not NOT 50
      s6 STATE 51
name=s6 0x1eebde0 type=STATE
   not NOT 50
      s7 STATE 51
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 51
name=s5.next 0x1eec170 type=STATE_N
   not NOT 50
      s6.next STATE_N 51
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 50
      s7.next STATE_N 51
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d86 0x1f35e70 MODULE 50
name=d86 typeMODULE
or OR 50
   d81 MODULE 51
   d82 MODULE 51
   d83 MODULE 51
   d84 MODULE 51
   d85 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d87 0x1f35d10 MODULE 50
name=d87 typeMODULE
and AND 50
   not NOT 50
      s5 STATE 51
name=s5 0x1eed870 type=STATE
   not NOT 50
      s6 STATE 51
name=s6 0x1eebde0 type=STATE
   s7 STATE 51
name=s7 0x1eebf60 type=STATE
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d88 0x1f4cd60 MODULE 50
name=d88 typeMODULE
and AND 50
   not NOT 50
      s8 STATE 42
   d75 MODULE 51
   d80 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d89 0x1f4d950 MODULE 50
name=d89 typeMODULE
and AND 50
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   d78 MODULE 51
   not NOT 50
      s8 STATE 51
name=s8 0x1eece40 type=STATE
   not NOT 50
      s8.next STATE_N 42
   d80 MODULE 51
   d59 PARAM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d90 0x1f4d860 MODULE 50
name=d90 typeMODULE
and AND 50
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 51
   = EQ 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   = EQ 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   = EQ 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   = EQ 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   = EQ 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   = EQ 50
      n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 51
name=n0 0x1ea4630 type=LEN
   not NOT 50
      s8 STATE 51
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 51
name=s8.next 0x1eecf90 type=STATE_N
   d80 MODULE 51
   d59 PARAM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d91 0x1f504a0 MODULE 50
name=d91 typeMODULE
and AND 50
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   = EQ 50
      s0.next STATE_N 51
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 51
name=s0 0x1e87ae0 type=STATE
   = EQ 50
      s1.next STATE_N 51
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 51
name=s1 0x1e968c0 type=STATE
   = EQ 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   = EQ 50
      s3.next STATE_N 51
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 51
name=s3 0x1ee6e70 type=STATE
   = EQ 50
      s4.next STATE_N 51
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 51
name=s4 0x1ee6fc0 type=STATE
   = EQ 50
      n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 51
name=n0 0x1ea4630 type=LEN
   s8 STATE 51
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 51
name=s8.next 0x1eecf90 type=STATE_N
   d86 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d92 0x1f4ec40 MODULE 50
name=d92 typeMODULE
and AND 50
   not NOT 50
      s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 51
   d57 PARAM 0
   s8 STATE 51
name=s8 0x1eece40 type=STATE
   not NOT 50
      s8.next STATE_N 51
name=s8.next 0x1eecf90 type=STATE_N
   d59 PARAM 0
   d87 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d93 0x1f51c80 MODULE 50
name=d93 typeMODULE
and AND 50
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 51
   d57 PARAM 0
   not NOT 50
      s8 STATE 51
name=s8 0x1eece40 type=STATE
   not NOT 50
      s8.next STATE_N 51
name=s8.next 0x1eecf90 type=STATE_N
   d80 MODULE 51
   d59 PARAM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d94 0x1f445e0 MODULE 50
name=d94 typeMODULE
and AND 50
   s2 STATE 51
name=s2 0x1ec9f10 type=STATE
   not NOT 50
      s2.next STATE_N 51
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 51
   d57 PARAM 0
   not NOT 50
      s8 STATE 51
name=s8 0x1eece40 type=STATE
   not NOT 50
      s8.next STATE_N 51
name=s8.next 0x1eecf90 type=STATE_N
   d80 MODULE 51
   d59 PARAM 0
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d95 0x1f53e30 MODULE 50
name=d95 typeMODULE
or OR 50
   d89 MODULE 51
   d90 MODULE 51
   d91 MODULE 51
   d92 MODULE 51
   d93 MODULE 51
   d94 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d96 0x1f55510 MODULE 50
name=d96 typeMODULE
and AND 50
   not NOT 50
      s8 STATE 51
name=s8 0x1eece40 type=STATE
   d79 MODULE 51
   d80 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d97 0x1f5c9c0 MODULE 50
name=d97 typeMODULE
and AND 50
   not NOT 50
      s9 STATE 0
   d0 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d98 0x1f5edd0 MODULE 50
name=d98 typeMODULE
and AND 50
   not NOT 50
      s9 STATE 51
name=s9 0x1f54fd0 type=STATE
   not NOT 50
      s9.next STATE_N 0
   d19 MODULE 51
   = EQ 50
      n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 51
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d99 0x1f5f4a0 MODULE 50
name=d99 typeMODULE
and AND 50
   s9 STATE 51
name=s9 0x1f54fd0 type=STATE
   s9.next STATE_N 51
name=s9.next 0x1f55120 type=STATE_N
   d95 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d100 0x1f5f860 MODULE 50
name=d100 typeMODULE
and AND 50
   epsilon MODULE 51
   not NOT 50
      s9 STATE 51
name=s9 0x1f54fd0 type=STATE
   s9.next STATE_N 51
name=s9.next 0x1f55120 type=STATE_N
   d20 MODULE 51
   I2_PARAM PARAM 0
   = EQ 50
      n0.next LEN_N 51
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 51
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d101 0x1f5f7c0 MODULE 50
name=d101 typeMODULE
or OR 50
   d98 MODULE 51
   d99 MODULE 51
   d100 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] d102 0x1f60480 MODULE 50
name=d102 typeMODULE
and AND 50
   s9 STATE 51
name=s9 0x1f54fd0 type=STATE
   d96 MODULE 51
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] I 0x1f5e7f0 MODULE 50
! EXCM 50
   d97 MODULE 51
   :init SPECIAL 0
   true CONST1 42
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] T 0x1f60050 MODULE 50
! EXCM 50
   d101 MODULE 51
   :trans SPECIAL 0
   true CONST1 51
name=true 0x1e7fd80 type=CONST1
[Aut::writeDefineFun] gflag=51
[Aut::writeDefineFun] O 0x1f60740 MODULE 50
! EXCM 50
   not NOT 50
      d102 MODULE 51
   :invar-property SPECIAL 0
   0 NUM 0
replace x_2_len regex_8 regex_9 regex_10 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0 () Int)"
[Aut::parse] tokenList = [ "n0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0.next () Int)"
[Aut::parse] tokenList = [ "n0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))"
[Aut::parse] tokenList = [ "epsilon" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d10" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d18" , "(or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d11 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d17
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d19" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d0 s0)) (and s1 (d10 s0))))"
[Aut::parse] tokenList = [ "d20" , "(or (and (not s1) (d0 s0)) (and s1 (d10 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d0 s0)) (and s1 (d10 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d0 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = (and s1 (d10 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d10 s0)
[Aut::buildVmtNode] root = d10
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d21" , "(and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d23" , "(or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d22
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d9 s0)) (and s1 (d19 s0))))"
[Aut::parse] tokenList = [ "d24" , "(or (and (not s1) (d9 s0)) (and s1 (d19 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d9 s0)) (and s1 (d19 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d9 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (and s1 (d19 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d19 s0)
[Aut::buildVmtNode] root = d19
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))"
[Aut::parse] tokenList = [ "d25" , "(and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d26" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (n0.next Int)) Bool (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))"
[Aut::parse] tokenList = [ "d27" , "(and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "n0" , "s0.next" , "s1.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d25
[Aut::buildVmtNode] line = (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d26
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d20 s0 s1) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d20 s0 s1) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d20 s0 s1) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d20 s0 s1)
[Aut::buildVmtNode] root = d20
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)
[Aut::buildVmtNode] root = d27
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d24 s0 s1)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d24 s0 s1)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d24 s0 s1)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d24 s0 s1))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d24 s0 s1)
[Aut::buildVmtNode] root = d24
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=53
[Aut::buildParam] ++gflag=54
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) s0.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) s0.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) s0.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((s0 Bool)) Bool s0)"
[Aut::parse] tokenList = [ "d2" , "s0" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d2 s0)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d2 s0)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d2 s0)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d2 s0))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d2 s0)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=56
[Aut::buildParam] ++gflag=57
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s0) s1 (not s2)))"
[Aut::parse] tokenList = [ "d0" , "(and (not s0) s1 (not s2))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s0) s1 s2 (not s0.next) (not s1.next) s2.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s0) s1 s2 (not s0.next) (not s1.next) s2.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s0) s1 s2 (not s0.next) (not s1.next) s2.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s0 (not s1) (not s2) (not s0.next) s1.next s2.next))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s0 (not s1) (not s2) (not s0.next) s1.next s2.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s0 (not s1) (not s2) (not s0.next) s1.next s2.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s0 (not s1) s2 (not s0.next) (not s1.next) (not s2.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s0 (not s1) s2 (not s0.next) (not s1.next) (not s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s0 (not s1) s2 (not s0.next) (not s1.next) (not s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s0) s1 (not s2) s0.next (not s1.next) s2.next))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s0) s1 (not s2) s0.next (not s1.next) s2.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s0) s1 (not s2) s0.next (not s1.next) s2.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s0) (not s1) (not s2) s0.next (not s1.next) (not s2.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s0) (not s1) (not s2) s0.next (not s1.next) (not s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s0) (not s1) (not s2) s0.next (not s1.next) (not s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)))"
[Aut::parse] tokenList = [ "d6" , "(or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s0.next" , "s1.next" , "s2.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d5
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s0) (not s1) s2))"
[Aut::parse] tokenList = [ "d7" , "(and (not s0) (not s1) s2)" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0 s1 s2) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0 s1 s2) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0 s1 s2) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0 s1 s2)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s0.next s1.next s2.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d7 s0 s1 s2)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d7 s0 s1 s2)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d7 s0 s1 s2)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d7 s0 s1 s2))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d7 s0 s1 s2)
[Aut::buildVmtNode] root = d7
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=59
[Aut::buildParam] ++gflag=60
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x2 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x2 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x3 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x3 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x3 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x3" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x3 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x1 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) (not x1) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) (not x1) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x2 s0 s0.next) (d2 x0 x3 s0 s0.next) (d3 x0 x4 s0 s0.next) (d4 x0 x5 s0 s0.next) (d5 x0 x6 s0 s0.next) (d6 x0 x7 s0 s0.next) (d7 x0 x1 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x2 s0 s0.next) (d2 x0 x3 s0 s0.next) (d3 x0 x4 s0 s0.next) (d4 x0 x5 s0 s0.next) (d5 x0 x6 s0 s0.next) (d6 x0 x7 s0 s0.next) (d7 x0 x1 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x2 s0 s0.next) (d2 x0 x3 s0 s0.next) (d3 x0 x4 s0 s0.next) (d4 x0 x5 s0 s0.next) (d5 x0 x6 s0 s0.next) (d6 x0 x7 s0 s0.next) (d7 x0 x1 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x2 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x3 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x4 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x5 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x7 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x1 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d9 s0)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d9 s0)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d9 s0)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d9 s0))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=62
[Aut::buildParam] ++gflag=63
[Aut::buildVmtNode] line = (and (not s2) tmpI1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = tmpI1
[Aut::defineFun] name=tmp2 body=(and (= s2.next s2) (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] line = (and (= s2.next s2) (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not leftAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (not rightAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpT1
[Aut::defineFun] name=tmp3 body=(or (and (not s2) s2.next leftAngle) (and s2 (not s2.next) rightAngle))
[Aut::buildVmtNode] line = (or (and (not s2) s2.next leftAngle) (and s2 (not s2.next) rightAngle))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s2) s2.next leftAngle)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (and s2 (not s2.next) rightAngle)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = rightAngle
[Aut::defineFun] name=tmp4 body=(and (= s0.next s0) (= s1.next s1) (= n0.next n0) tmp3)
[Aut::buildVmtNode] line = (and (= s0.next s0) (= s1.next s1) (= n0.next n0) tmp3)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = (or tmp2 tmp4)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = (and (not s2) tmpO1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = tmpO1
[Aut::clearParam] ++gflag=64
[Aut::buildParam] ++gflag=65
[Aut::defineFun] name=tmp1 body=(and (not s1) tmpI2)
[Aut::buildVmtNode] line = (and (not s1) tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s1) (not s1.next) (not leftAngle) (not rightAngle) tmpT2)
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (not leftAngle) (not rightAngle) tmpT2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not leftAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (not rightAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpT2
[Aut::defineFun] name=tmp3 body=(and s1 s1.next (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] line = (and s1 s1.next (not leftAngle) (not rightAngle) tmpT1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not leftAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = (not rightAngle)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpT1
[Aut::defineFun] name=tmp4 body=(and (not s1) s1.next leftAngle tmpO2 I1_PARAM)
[Aut::buildVmtNode] line = (and (not s1) s1.next leftAngle tmpO2 I1_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = leftAngle
[Aut::buildVmtNode] line = tmpO2
[Aut::buildVmtNode] line = I1_PARAM
[Aut::defineFun] name=tmp5 body=(and s1 (not s1.next) rightAngle tmpO1 I2_PARAM)
[Aut::buildVmtNode] line = (and s1 (not s1.next) rightAngle tmpO1 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = rightAngle
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp6 body=(or tmp2 tmp3 tmp4 tmp5)
[Aut::buildVmtNode] line = (or tmp2 tmp3 tmp4 tmp5)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = tmp5
[Aut::defineFun] name=T body=(! tmp6 :trans true)
[Aut::buildVmtNode] line = (! tmp6 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp6
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp7 body=(and (not s1) tmpO2)
[Aut::buildVmtNode] line = (and (not s1) tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp7) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp7) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp7
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=66
[Aut::buildParam] ++gflag=67
[Aut::clearParam] ++gflag=69
[Aut::buildParam] ++gflag=70
[Aut::defineFun] name=tmp1 body=(and tmpI1 tmpI2)
[Aut::buildVmtNode] line = (and tmpI1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = tmpI1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=T1_epsilon body=(or tmpT1 (and epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] line = (or tmpT1 (and epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmpT1
[Aut::buildVmtNode] line = (and epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::defineFun] name=T2_epsilon body=(or tmpT2 (and epsilon (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] line = (or tmpT2 (and epsilon (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmpT2
[Aut::buildVmtNode] line = (and epsilon (= s3.next s3) (= s4.next s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::defineFun] name=tmp2 body=(and T1_epsilon T2_epsilon)
[Aut::buildVmtNode] line = (and T1_epsilon T2_epsilon)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = T1_epsilon
[Aut::buildVmtNode] line = T2_epsilon
[Aut::defineFun] name=T body=(! tmp2 :trans true)
[Aut::buildVmtNode] line = (! tmp2 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp3 body=(and tmpO1 tmpO2)
[Aut::buildVmtNode] line = (and tmpO1 tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp3) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp3) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=71
[Aut::buildParam] ++gflag=72
[Aut::clearParam] ++gflag=74
[Aut::buildParam] ++gflag=75
[Aut::defineFun] name=tmp1 body=(and (not s8) tmpI1 tmpI2)
[Aut::buildVmtNode] line = (and (not s8) tmpI1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = tmpI1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s2) (not s2.next) tmpT1 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) tmpT1 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = tmpT1
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp3 body=(and (not s2) (not s2.next) epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) epsilon (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp4 body=(and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next tmpT2)
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next tmpT2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpT2
[Aut::defineFun] name=tmp5 body=(and (not s2) s2.next epsilon T1_PARAM_1 s8 (not s8.next) I2_PARAM tmpO2)
[Aut::buildVmtNode] line = (and (not s2) s2.next epsilon T1_PARAM_1 s8 (not s8.next) I2_PARAM tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = T1_PARAM_1
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = I2_PARAM
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=tmp6 body=(and s2 s2.next epsilon T1_PARAM_2 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and s2 s2.next epsilon T1_PARAM_2 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = T1_PARAM_2
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp7 body=(and s2 (not s2.next) epsilon T1_PARAM_3 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] line = (and s2 (not s2.next) epsilon T1_PARAM_3 (not s8) (not s8.next) tmpI2 I2_PARAM)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = T1_PARAM_3
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = tmpI2
[Aut::buildVmtNode] line = I2_PARAM
[Aut::defineFun] name=tmp8 body=(or tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
[Aut::buildVmtNode] line = (or tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = tmp4
[Aut::buildVmtNode] line = tmp5
[Aut::buildVmtNode] line = tmp6
[Aut::buildVmtNode] line = tmp7
[Aut::defineFun] name=T body=(! tmp8 :trans true)
[Aut::buildVmtNode] line = (! tmp8 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp8
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp9 body=(and (not s8) tmpO1 tmpI2)
[Aut::buildVmtNode] line = (and (not s8) tmpO1 tmpI2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = tmpI2
[Aut::defineFun] name=O body=(! (not tmp9) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp9) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp9
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=76
[Aut::buildParam] ++gflag=77
write x_13 
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] epsilon 0x1e7ff00 MODULE 77
name=epsilon typeMODULE
and AND 77
   x0 INPUT 51
   not NOT 77
      x1 INPUT 51
   not NOT 77
      x2 INPUT 51
   not NOT 77
      x3 INPUT 51
   not NOT 77
      x4 INPUT 51
   not NOT 77
      x5 INPUT 51
   not NOT 77
      x6 INPUT 51
   not NOT 77
      x7 INPUT 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] leftAngle 0x1e80de0 MODULE 77
name=leftAngle typeMODULE
and AND 77
   x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] rightAngle 0x1e81b60 MODULE 77
name=rightAngle typeMODULE
and AND 77
   x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d0 0x1f62890 MODULE 77
name=d0 typeMODULE
not NOT 77
   s0 STATE 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d1 0x1f61630 MODULE 77
name=d1 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d2 0x1f63bd0 MODULE 77
name=d2 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d3 0x1f67180 MODULE 77
name=d3 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d4 0x1f67c00 MODULE 77
name=d4 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d5 0x1f686c0 MODULE 77
name=d5 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d6 0x1f69190 MODULE 77
name=d6 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d7 0x1f69df0 MODULE 77
name=d7 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d8 0x1f6ab80 MODULE 77
name=d8 typeMODULE
or OR 77
   d1 MODULE 78
   d2 MODULE 78
   d3 MODULE 78
   d4 MODULE 78
   d5 MODULE 78
   d6 MODULE 78
   d7 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d9 0x1f6aa80 MODULE 77
name=d9 typeMODULE
not NOT 77
   s0 STATE 78
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d10 0x1f6c0a0 MODULE 77
name=d10 typeMODULE
not NOT 77
   s0 STATE 78
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d11 0x1f6c440 MODULE 77
name=d11 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d12 0x1f6cf90 MODULE 77
name=d12 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d13 0x1f6dbf0 MODULE 77
name=d13 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d14 0x1f6e660 MODULE 77
name=d14 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d15 0x1f6f100 MODULE 77
name=d15 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d16 0x1f6fbd0 MODULE 77
name=d16 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d17 0x1f6bdd0 MODULE 77
name=d17 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   not NOT 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d18 0x1f714f0 MODULE 77
name=d18 typeMODULE
or OR 77
   d11 MODULE 78
   d12 MODULE 78
   d13 MODULE 78
   d14 MODULE 78
   d15 MODULE 78
   d16 MODULE 78
   d17 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d19 0x1f713f0 MODULE 77
name=d19 typeMODULE
not NOT 77
   s0 STATE 78
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d20 0x1f72a40 MODULE 77
name=d20 typeMODULE
or OR 77
   and AND 77
      not NOT 77
         s1 STATE 51
      d0 MODULE 78
   and AND 77
      s1 STATE 78
name=s1 0x1e968c0 type=STATE
      d10 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d21 0x1f73650 MODULE 77
name=d21 typeMODULE
and AND 77
   not NOT 77
      s1 STATE 78
name=s1 0x1e968c0 type=STATE
   not NOT 77
      s1.next STATE_N 51
   d8 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d22 0x1f74290 MODULE 77
name=d22 typeMODULE
and AND 77
   s1 STATE 78
name=s1 0x1e968c0 type=STATE
   s1.next STATE_N 78
name=s1.next 0x1e96a10 type=STATE_N
   d18 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d23 0x1f749b0 MODULE 77
name=d23 typeMODULE
or OR 77
   d21 MODULE 78
   d22 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d24 0x1f75210 MODULE 77
name=d24 typeMODULE
or OR 77
   and AND 77
      not NOT 77
         s1 STATE 78
name=s1 0x1e968c0 type=STATE
      d9 MODULE 78
   and AND 77
      s1 STATE 78
name=s1 0x1e968c0 type=STATE
      d19 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d25 0x1f75c90 MODULE 77
name=d25 typeMODULE
and AND 77
   not NOT 77
      epsilon MODULE 78
   = EQ 77
      n0.next LEN_N 51
      + PLUS 77
         n0 LEN 51
         1 NUM 0
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d26 0x1f76870 MODULE 77
name=d26 typeMODULE
and AND 77
   epsilon MODULE 78
   = EQ 77
      n0.next LEN_N 78
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 78
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d27 0x1f77110 MODULE 77
name=d27 typeMODULE
and AND 77
   d23 MODULE 78
   or OR 77
      d25 MODULE 78
      d26 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d28 0x1f89050 MODULE 77
name=d28 typeMODULE
and AND 77
   not NOT 77
      s2 STATE 51
   d20 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d29 0x1f88310 MODULE 77
name=d29 typeMODULE
and AND 77
   = EQ 77
      s2.next STATE_N 51
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   not NOT 77
      leftAngle MODULE 78
   not NOT 77
      rightAngle MODULE 78
   d27 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d30 0x1f89740 MODULE 77
name=d30 typeMODULE
or OR 77
   and AND 77
      not NOT 77
         s2 STATE 78
name=s2 0x1ec9f10 type=STATE
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
      leftAngle MODULE 78
   and AND 77
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
      not NOT 77
         s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
      rightAngle MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d31 0x1f88280 MODULE 77
name=d31 typeMODULE
and AND 77
   = EQ 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   = EQ 77
      s1.next STATE_N 78
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 78
name=s1 0x1e968c0 type=STATE
   = EQ 77
      n0.next LEN_N 78
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 78
name=n0 0x1ea4630 type=LEN
   d30 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d32 0x1f90cc0 MODULE 77
name=d32 typeMODULE
or OR 77
   d29 MODULE 78
   d31 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d33 0x1f70870 MODULE 77
name=d33 typeMODULE
and AND 77
   not NOT 77
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   d24 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d34 0x1f66a90 MODULE 77
name=d34 typeMODULE
not NOT 77
   s3 STATE 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d35 0x1f652a0 MODULE 77
name=d35 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   s3.next STATE_N 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d36 0x1f65220 MODULE 77
name=d36 typeMODULE
s3 STATE 78
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d37 0x1f7e7f0 MODULE 77
name=d37 typeMODULE
not NOT 77
   s3 STATE 78
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d38 0x1f7fbd0 MODULE 77
name=d38 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d39 0x1f8a0e0 MODULE 77
name=d39 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d40 0x1f8a850 MODULE 77
name=d40 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d41 0x1f8b0c0 MODULE 77
name=d41 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d42 0x1f8b990 MODULE 77
name=d42 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d43 0x1f8c280 MODULE 77
name=d43 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d44 0x1f7eb50 MODULE 77
name=d44 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   not NOT 77
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   not NOT 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d45 0x1f8d970 MODULE 77
name=d45 typeMODULE
or OR 77
   d38 MODULE 78
   d39 MODULE 78
   d40 MODULE 78
   d41 MODULE 78
   d42 MODULE 78
   d43 MODULE 78
   d44 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d46 0x1f8d8b0 MODULE 77
name=d46 typeMODULE
not NOT 77
   s3 STATE 78
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d47 0x1f923b0 MODULE 77
name=d47 typeMODULE
and AND 77
   not NOT 77
      s4 STATE 51
   d37 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d48 0x1f93a70 MODULE 77
name=d48 typeMODULE
and AND 77
   not NOT 77
      s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   not NOT 77
      s4.next STATE_N 51
   not NOT 77
      leftAngle MODULE 78
   not NOT 77
      rightAngle MODULE 78
   d45 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d49 0x1f94500 MODULE 77
name=d49 typeMODULE
and AND 77
   s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 78
name=s4.next 0x1ee80f0 type=STATE_N
   not NOT 77
      leftAngle MODULE 78
   not NOT 77
      rightAngle MODULE 78
   d35 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d50 0x1f94c20 MODULE 77
name=d50 typeMODULE
and AND 77
   not NOT 77
      s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 78
name=s4.next 0x1ee80f0 type=STATE_N
   leftAngle MODULE 78
   d46 MODULE 78
   I1_PARAM PARAM 68
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d51 0x1f95190 MODULE 77
name=d51 typeMODULE
and AND 77
   s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   not NOT 77
      s4.next STATE_N 78
name=s4.next 0x1ee80f0 type=STATE_N
   rightAngle MODULE 78
   d36 MODULE 78
   I2_PARAM PARAM 68
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d52 0x1f95110 MODULE 77
name=d52 typeMODULE
or OR 77
   d48 MODULE 78
   d49 MODULE 78
   d50 MODULE 78
   d51 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d53 0x1f95e90 MODULE 77
name=d53 typeMODULE
and AND 77
   not NOT 77
      s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   d46 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d54 0x1f98ba0 MODULE 77
name=d54 typeMODULE
and AND 77
   d28 MODULE 78
   d47 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d55 0x1f994a0 MODULE 77
name=d55 typeMODULE
or OR 77
   d32 MODULE 78
   and AND 77
      epsilon MODULE 78
      = EQ 77
         s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
         s0 STATE 78
name=s0 0x1e87ae0 type=STATE
      = EQ 77
         s1.next STATE_N 78
name=s1.next 0x1e96a10 type=STATE_N
         s1 STATE 78
name=s1 0x1e968c0 type=STATE
      = EQ 77
         s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
         s2 STATE 78
name=s2 0x1ec9f10 type=STATE
      = EQ 77
         n0.next LEN_N 78
name=n0.next 0x1e9e1f0 type=LEN_N
         n0 LEN 78
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d56 0x1f99350 MODULE 77
name=d56 typeMODULE
or OR 77
   d52 MODULE 78
   and AND 77
      epsilon MODULE 78
      = EQ 77
         s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
         s3 STATE 78
name=s3 0x1ee6e70 type=STATE
      = EQ 77
         s4.next STATE_N 78
name=s4.next 0x1ee80f0 type=STATE_N
         s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d57 0x1f9a600 MODULE 77
name=d57 typeMODULE
and AND 77
   d55 MODULE 78
   d56 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d58 0x1f9ad70 MODULE 77
name=d58 typeMODULE
and AND 77
   d33 MODULE 78
   d53 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d59 0x1f7a760 MODULE 77
name=d59 typeMODULE
and AND 77
   not NOT 77
      s5 STATE 51
   s6 STATE 51
   not NOT 77
      s7 STATE 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d60 0x1f7b260 MODULE 77
name=d60 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s5 STATE 78
name=s5 0x1eed870 type=STATE
   s6 STATE 78
name=s6 0x1eebde0 type=STATE
   s7 STATE 78
name=s7 0x1eebf60 type=STATE
   not NOT 77
      s5.next STATE_N 51
   not NOT 77
      s6.next STATE_N 51
   s7.next STATE_N 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d61 0x1f7aec0 MODULE 77
name=d61 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   not NOT 77
      x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 78
name=s5 0x1eed870 type=STATE
   not NOT 77
      s6 STATE 78
name=s6 0x1eebde0 type=STATE
   not NOT 77
      s7 STATE 78
name=s7 0x1eebf60 type=STATE
   not NOT 77
      s5.next STATE_N 78
name=s5.next 0x1eec170 type=STATE_N
   s6.next STATE_N 78
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 78
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d62 0x1f81b80 MODULE 77
name=d62 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   not NOT 77
      x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 78
name=s5 0x1eed870 type=STATE
   not NOT 77
      s6 STATE 78
name=s6 0x1eebde0 type=STATE
   s7 STATE 78
name=s7 0x1eebf60 type=STATE
   not NOT 77
      s5.next STATE_N 78
name=s5.next 0x1eec170 type=STATE_N
   not NOT 77
      s6.next STATE_N 78
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 77
      s7.next STATE_N 78
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d63 0x1f82ea0 MODULE 77
name=d63 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   not NOT 77
      x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s5 STATE 78
name=s5 0x1eed870 type=STATE
   s6 STATE 78
name=s6 0x1eebde0 type=STATE
   not NOT 77
      s7 STATE 78
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 78
name=s5.next 0x1eec170 type=STATE_N
   not NOT 77
      s6.next STATE_N 78
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 78
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d64 0x1f82e10 MODULE 77
name=d64 typeMODULE
and AND 77
   not NOT 77
      x0 INPUT 78
name=x0 0x1e7ef60 type=INPUT
   not NOT 77
      x1 INPUT 78
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 78
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 78
name=x3 0x1e7f490 type=INPUT
   not NOT 77
      x4 INPUT 78
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 78
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 78
name=x6 0x1e7f930 type=INPUT
   not NOT 77
      x7 INPUT 78
name=x7 0x1e7fab0 type=INPUT
   not NOT 77
      s5 STATE 78
name=s5 0x1eed870 type=STATE
   not NOT 77
      s6 STATE 78
name=s6 0x1eebde0 type=STATE
   not NOT 77
      s7 STATE 78
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 78
name=s5.next 0x1eec170 type=STATE_N
   not NOT 77
      s6.next STATE_N 78
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 77
      s7.next STATE_N 78
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d65 0x1f85430 MODULE 77
name=d65 typeMODULE
or OR 77
   d60 MODULE 78
   d61 MODULE 78
   d62 MODULE 78
   d63 MODULE 78
   d64 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d66 0x1f85310 MODULE 77
name=d66 typeMODULE
and AND 77
   not NOT 77
      s5 STATE 78
name=s5 0x1eed870 type=STATE
   not NOT 77
      s6 STATE 78
name=s6 0x1eebde0 type=STATE
   s7 STATE 78
name=s7 0x1eebf60 type=STATE
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d67 0x1f9f7c0 MODULE 77
name=d67 typeMODULE
and AND 77
   not NOT 77
      s8 STATE 51
   d54 MODULE 78
   d59 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d68 0x1fa0130 MODULE 77
name=d68 typeMODULE
and AND 77
   not NOT 77
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   not NOT 77
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
   d57 MODULE 78
   not NOT 77
      s8 STATE 78
name=s8 0x1eece40 type=STATE
   not NOT 77
      s8.next STATE_N 51
   d59 MODULE 78
   I2_PARAM PARAM 0
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d69 0x1fa00a0 MODULE 77
name=d69 typeMODULE
and AND 77
   not NOT 77
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   not NOT 77
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 78
   = EQ 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   = EQ 77
      s1.next STATE_N 78
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 78
name=s1 0x1e968c0 type=STATE
   = EQ 77
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   = EQ 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   = EQ 77
      s4.next STATE_N 78
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   = EQ 77
      n0.next LEN_N 78
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 78
name=n0 0x1ea4630 type=LEN
   not NOT 77
      s8 STATE 78
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 78
name=s8.next 0x1eecf90 type=STATE_N
   d59 MODULE 78
   I2_PARAM PARAM 78
name=I2_PARAM 0x1f9e320 type=PARAM
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d70 0x1fa1ff0 MODULE 77
name=d70 typeMODULE
and AND 77
   not NOT 77
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   not NOT 77
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
   = EQ 77
      s0.next STATE_N 78
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 78
name=s0 0x1e87ae0 type=STATE
   = EQ 77
      s1.next STATE_N 78
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 78
name=s1 0x1e968c0 type=STATE
   = EQ 77
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   = EQ 77
      s3.next STATE_N 78
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 78
name=s3 0x1ee6e70 type=STATE
   = EQ 77
      s4.next STATE_N 78
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 78
name=s4 0x1ee6fc0 type=STATE
   = EQ 77
      n0.next LEN_N 78
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 78
name=n0 0x1ea4630 type=LEN
   s8 STATE 78
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 78
name=s8.next 0x1eecf90 type=STATE_N
   d65 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d71 0x1fa0b00 MODULE 77
name=d71 typeMODULE
and AND 77
   not NOT 77
      s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 78
   T1_PARAM_1 PARAM 0
   s8 STATE 78
name=s8 0x1eece40 type=STATE
   not NOT 77
      s8.next STATE_N 78
name=s8.next 0x1eecf90 type=STATE_N
   I2_PARAM PARAM 78
name=I2_PARAM 0x1f9e320 type=PARAM
   d66 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d72 0x1fa33e0 MODULE 77
name=d72 typeMODULE
and AND 77
   s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 78
   T1_PARAM_2 PARAM 0
   not NOT 77
      s8 STATE 78
name=s8 0x1eece40 type=STATE
   not NOT 77
      s8.next STATE_N 78
name=s8.next 0x1eecf90 type=STATE_N
   d59 MODULE 78
   I2_PARAM PARAM 78
name=I2_PARAM 0x1f9e320 type=PARAM
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d73 0x1fa09f0 MODULE 77
name=d73 typeMODULE
and AND 77
   s2 STATE 78
name=s2 0x1ec9f10 type=STATE
   not NOT 77
      s2.next STATE_N 78
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 78
   T1_PARAM_3 PARAM 0
   not NOT 77
      s8 STATE 78
name=s8 0x1eece40 type=STATE
   not NOT 77
      s8.next STATE_N 78
name=s8.next 0x1eecf90 type=STATE_N
   d59 MODULE 78
   I2_PARAM PARAM 78
name=I2_PARAM 0x1f9e320 type=PARAM
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d74 0x1fa3340 MODULE 77
name=d74 typeMODULE
or OR 77
   d68 MODULE 78
   d69 MODULE 78
   d70 MODULE 78
   d71 MODULE 78
   d72 MODULE 78
   d73 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] d75 0x1fa4a90 MODULE 77
name=d75 typeMODULE
and AND 77
   not NOT 77
      s8 STATE 78
name=s8 0x1eece40 type=STATE
   d58 MODULE 78
   d59 MODULE 78
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] I 0x1f9fc50 MODULE 77
! EXCM 77
   d67 MODULE 78
   :init SPECIAL 0
   true CONST1 51
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] T 0x1fa4540 MODULE 77
! EXCM 77
   d74 MODULE 78
   :trans SPECIAL 0
   true CONST1 78
name=true 0x1e7fd80 type=CONST1
[Aut::writeDefineFun] gflag=78
[Aut::writeDefineFun] O 0x1fa4f90 MODULE 77
! EXCM 77
   not NOT 77
      d75 MODULE 78
   :invar-property SPECIAL 0
   0 NUM 0
concate x_8 literal_11 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y8 () Bool)"
[Aut::parse] tokenList = [ "y8" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y8.next () Bool)"
[Aut::parse] tokenList = [ "y8.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y9 () Bool)"
[Aut::parse] tokenList = [ "y9" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y9.next () Bool)"
[Aut::parse] tokenList = [ "y9.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y10 () Bool)"
[Aut::parse] tokenList = [ "y10" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y10.next () Bool)"
[Aut::parse] tokenList = [ "y10.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y11 () Bool)"
[Aut::parse] tokenList = [ "y11" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y11.next () Bool)"
[Aut::parse] tokenList = [ "y11.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y12 () Bool)"
[Aut::parse] tokenList = [ "y12" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y12.next () Bool)"
[Aut::parse] tokenList = [ "y12.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y13 () Bool)"
[Aut::parse] tokenList = [ "y13" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y13.next () Bool)"
[Aut::parse] tokenList = [ "y13.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y14 () Bool)"
[Aut::parse] tokenList = [ "y14" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y14.next () Bool)"
[Aut::parse] tokenList = [ "y14.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y15 () Bool)"
[Aut::parse] tokenList = [ "y15" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y15.next () Bool)"
[Aut::parse] tokenList = [ "y15.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3 () Bool)"
[Aut::parse] tokenList = [ "s3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3.next () Bool)"
[Aut::parse] tokenList = [ "s3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4 () Bool)"
[Aut::parse] tokenList = [ "s4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4.next () Bool)"
[Aut::parse] tokenList = [ "s4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5 () Bool)"
[Aut::parse] tokenList = [ "s5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5.next () Bool)"
[Aut::parse] tokenList = [ "s5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6 () Bool)"
[Aut::parse] tokenList = [ "s6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6.next () Bool)"
[Aut::parse] tokenList = [ "s6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7 () Bool)"
[Aut::parse] tokenList = [ "s7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7.next () Bool)"
[Aut::parse] tokenList = [ "s7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8 () Bool)"
[Aut::parse] tokenList = [ "s8" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8.next () Bool)"
[Aut::parse] tokenList = [ "s8.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s9 () Bool)"
[Aut::parse] tokenList = [ "s9" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s9.next () Bool)"
[Aut::parse] tokenList = [ "s9.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0 () Int)"
[Aut::parse] tokenList = [ "n0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0.next () Int)"
[Aut::parse] tokenList = [ "n0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))"
[Aut::parse] tokenList = [ "epsilon" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun leftAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7))"
[Aut::parse] tokenList = [ "leftAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun rightAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7)))"
[Aut::parse] tokenList = [ "rightAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s0) (not s1) s2 (not s3) (not s4)))"
[Aut::parse] tokenList = [ "d0" , "(and (not s0) (not s1) s2 (not s3) (not s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2 (not s3) (not s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next))"
[Aut::parse] tokenList = [ "d8" , "(and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next))"
[Aut::parse] tokenList = [ "d9" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d10" , "(and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d18" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)))"
[Aut::parse] tokenList = [ "d19" , "(or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d7
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d10
[Aut::buildVmtNode] line = (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d17
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s0) s1 (not s2) (not s3) (not s4)))"
[Aut::parse] tokenList = [ "d20" , "(and (not s0) s1 (not s2) (not s3) (not s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2) (not s3) (not s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d21" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d23" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d24" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d25 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d25" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d26 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d26" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d27 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d27" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d28 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d28" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d22 x0 x1 x3 x5 x7 s0 s0.next) (d23 x0 x1 x5 x6 x7 s0 s0.next) (d24 x0 x1 x4 x5 s0 s0.next) (d25 x0 x1 x3 x4 s0 s0.next) (d26 x0 x1 x4 x6 s0 s0.next) (d27 x0 x2 x3 x5 x6 s0 s0.next) (d28 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d29" , "(or (d22 x0 x1 x3 x5 x7 s0 s0.next) (d23 x0 x1 x5 x6 x7 s0 s0.next) (d24 x0 x1 x4 x5 s0 s0.next) (d25 x0 x1 x3 x4 s0 s0.next) (d26 x0 x1 x4 x6 s0 s0.next) (d27 x0 x2 x3 x5 x6 s0 s0.next) (d28 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d22 x0 x1 x3 x5 x7 s0 s0.next) (d23 x0 x1 x5 x6 x7 s0 s0.next) (d24 x0 x1 x4 x5 s0 s0.next) (d25 x0 x1 x3 x4 s0 s0.next) (d26 x0 x1 x4 x6 s0 s0.next) (d27 x0 x2 x3 x5 x6 s0 s0.next) (d28 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d22 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d22
[Aut::buildVmtNode] line = (d23 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = (d24 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d24
[Aut::buildVmtNode] line = (d25 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d25
[Aut::buildVmtNode] line = (d26 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d26
[Aut::buildVmtNode] line = (d27 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d27
[Aut::buildVmtNode] line = (d28 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d28
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d30 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d30" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d31 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d31" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d32 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d32" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d33 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d33" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d34 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d34" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d35 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d35" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d36 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d36" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d37 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d37" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d38 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d38" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d32 x0 x1 x3 x5 x7 s0 s0.next) (d33 x0 x1 x5 x6 x7 s0 s0.next) (d34 x0 x1 x4 x5 s0 s0.next) (d35 x0 x1 x3 x4 s0 s0.next) (d36 x0 x1 x4 x6 s0 s0.next) (d37 x0 x2 x3 x5 x6 s0 s0.next) (d38 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d39" , "(or (d32 x0 x1 x3 x5 x7 s0 s0.next) (d33 x0 x1 x5 x6 x7 s0 s0.next) (d34 x0 x1 x4 x5 s0 s0.next) (d35 x0 x1 x3 x4 s0 s0.next) (d36 x0 x1 x4 x6 s0 s0.next) (d37 x0 x2 x3 x5 x6 s0 s0.next) (d38 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d32 x0 x1 x3 x5 x7 s0 s0.next) (d33 x0 x1 x5 x6 x7 s0 s0.next) (d34 x0 x1 x4 x5 s0 s0.next) (d35 x0 x1 x3 x4 s0 s0.next) (d36 x0 x1 x4 x6 s0 s0.next) (d37 x0 x2 x3 x5 x6 s0 s0.next) (d38 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d32 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d32
[Aut::buildVmtNode] line = (d33 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d33
[Aut::buildVmtNode] line = (d34 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d34
[Aut::buildVmtNode] line = (d35 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d35
[Aut::buildVmtNode] line = (d36 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d36
[Aut::buildVmtNode] line = (d37 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d37
[Aut::buildVmtNode] line = (d38 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d38
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d40 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d40" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d41 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d21 s0)) (and s1 (d31 s0))))"
[Aut::parse] tokenList = [ "d41" , "(or (and (not s1) (d21 s0)) (and s1 (d31 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d21 s0)) (and s1 (d31 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d21 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d21 s0)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (and s1 (d31 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d31 s0)
[Aut::buildVmtNode] root = d31
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d42 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d42" , "(and (not s1) (not s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d29
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d43" , "(and s1 s1.next (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d39
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d44" , "(or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d42
[Aut::buildVmtNode] line = (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d43
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d45 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d30 s0)) (and s1 (d40 s0))))"
[Aut::parse] tokenList = [ "d45" , "(or (and (not s1) (d30 s0)) (and s1 (d40 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d30 s0)) (and s1 (d40 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d30 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d30 s0)
[Aut::buildVmtNode] root = d30
[Aut::buildVmtNode] line = (and s1 (d40 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d40 s0)
[Aut::buildVmtNode] root = d40
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))"
[Aut::parse] tokenList = [ "d46" , "(and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d47" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (n0.next Int)) Bool (and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))"
[Aut::parse] tokenList = [ "d48" , "(and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "n0" , "s0.next" , "s1.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d44
[Aut::buildVmtNode] line = (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d46
[Aut::buildVmtNode] line = (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d47
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d49 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d41 s0 s1)))"
[Aut::parse] tokenList = [ "d49" , "(and (not s2) (d41 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d41 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d41 s0 s1)
[Aut::buildVmtNode] root = d41
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)))"
[Aut::parse] tokenList = [ "d50" , "(and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)
[Aut::buildVmtNode] root = d48
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))))"
[Aut::parse] tokenList = [ "d51" , "(or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s2" , "s2.next" ]
[Aut::buildVmtNode] line = (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))"
[Aut::parse] tokenList = [ "d52" , "(and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)
[Aut::buildVmtNode] root = d51
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)))"
[Aut::parse] tokenList = [ "d53" , "(or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d50
[Aut::buildVmtNode] line = (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d52
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d54 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d45 s0 s1)))"
[Aut::parse] tokenList = [ "d54" , "(and (not s2) (d45 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d45 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d45 s0 s1)
[Aut::buildVmtNode] root = d45
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d55 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d55" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next))"
[Aut::parse] tokenList = [ "d56" , "(and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d57 ((s3 Bool)) Bool s3)"
[Aut::parse] tokenList = [ "d57" , "s3" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d58 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d58" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d59 ((x0 Bool) (x2 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x2 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d59" , "(and (not x0) x2 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d60 ((x0 Bool) (x3 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d60" , "(and (not x0) x3 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x3" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x3 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d61 ((x0 Bool) (x4 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x4 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d61" , "(and (not x0) x4 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x4" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x4 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d62 ((x0 Bool) (x5 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x5 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d62" , "(and (not x0) x5 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x5" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x5 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d63 ((x0 Bool) (x6 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x6 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d63" , "(and (not x0) x6 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x6" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x6 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d64 ((x0 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x7 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d64" , "(and (not x0) x7 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x7 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d65 ((x0 Bool) (x1 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x1) (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d65" , "(and (not x0) (not x1) (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d66 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d59 x0 x2 s3 s3.next) (d60 x0 x3 s3 s3.next) (d61 x0 x4 s3 s3.next) (d62 x0 x5 s3 s3.next) (d63 x0 x6 s3 s3.next) (d64 x0 x7 s3 s3.next) (d65 x0 x1 s3 s3.next)))"
[Aut::parse] tokenList = [ "d66" , "(or (d59 x0 x2 s3 s3.next) (d60 x0 x3 s3 s3.next) (d61 x0 x4 s3 s3.next) (d62 x0 x5 s3 s3.next) (d63 x0 x6 s3 s3.next) (d64 x0 x7 s3 s3.next) (d65 x0 x1 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (or (d59 x0 x2 s3 s3.next) (d60 x0 x3 s3 s3.next) (d61 x0 x4 s3 s3.next) (d62 x0 x5 s3 s3.next) (d63 x0 x6 s3 s3.next) (d64 x0 x7 s3 s3.next) (d65 x0 x1 s3 s3.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d59 x0 x2 s3 s3.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d60 x0 x3 s3 s3.next)
[Aut::buildVmtNode] root = d60
[Aut::buildVmtNode] line = (d61 x0 x4 s3 s3.next)
[Aut::buildVmtNode] root = d61
[Aut::buildVmtNode] line = (d62 x0 x5 s3 s3.next)
[Aut::buildVmtNode] root = d62
[Aut::buildVmtNode] line = (d63 x0 x6 s3 s3.next)
[Aut::buildVmtNode] root = d63
[Aut::buildVmtNode] line = (d64 x0 x7 s3 s3.next)
[Aut::buildVmtNode] root = d64
[Aut::buildVmtNode] line = (d65 x0 x1 s3 s3.next)
[Aut::buildVmtNode] root = d65
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d67 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d67" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d68 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d58 s3)))"
[Aut::parse] tokenList = [ "d68" , "(and (not s4) (d58 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d58 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d58 s3)
[Aut::buildVmtNode] root = d58
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d69" , "(and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d66
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d70" , "(and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d56
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d67 s3) (d55 s3.next)))"
[Aut::parse] tokenList = [ "d71" , "(and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d67 s3) (d55 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d67 s3) (d55 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (d67 s3)
[Aut::buildVmtNode] root = d67
[Aut::buildVmtNode] line = (d55 s3.next)
[Aut::buildVmtNode] root = d55
[Aut::buildVmtNode] d55 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d72 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d57 s3) (d58 s3.next)))"
[Aut::parse] tokenList = [ "d72" , "(and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d57 s3) (d58 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d57 s3) (d58 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d57 s3)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] line = (d58 s3.next)
[Aut::buildVmtNode] root = d58
[Aut::buildVmtNode] d58 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d73 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d73" , "(or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d69
[Aut::buildVmtNode] line = (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d70
[Aut::buildVmtNode] line = (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d71
[Aut::buildVmtNode] line = (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d72
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d74 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d67 s3)))"
[Aut::parse] tokenList = [ "d74" , "(and (not s4) (d67 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d67 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d67 s3)
[Aut::buildVmtNode] root = d67
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d75 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d49 s0 s1 s2) (d68 s3 s4)))"
[Aut::parse] tokenList = [ "d75" , "(and (d49 s0 s1 s2) (d68 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d49 s0 s1 s2) (d68 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d49 s0 s1 s2)
[Aut::buildVmtNode] root = d49
[Aut::buildVmtNode] line = (d68 s3 s4)
[Aut::buildVmtNode] root = d68
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d76 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))))"
[Aut::parse] tokenList = [ "d76" , "(or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d53
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d77 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))))"
[Aut::parse] tokenList = [ "d77" , "(or (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d73
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d78 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d78" , "(and (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d76
[Aut::buildVmtNode] line = (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d77
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d79 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d54 s0 s1 s2) (d74 s3 s4)))"
[Aut::parse] tokenList = [ "d79" , "(and (d54 s0 s1 s2) (d74 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d54 s0 s1 s2) (d74 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d54 s0 s1 s2)
[Aut::buildVmtNode] root = d54
[Aut::buildVmtNode] line = (d74 s3 s4)
[Aut::buildVmtNode] root = d74
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d80 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) s6 (not s7)))"
[Aut::parse] tokenList = [ "d80" , "(and (not s5) s6 (not s7))" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) s6 (not s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d81 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d81" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d82 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next))"
[Aut::parse] tokenList = [ "d82" , "(and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d83 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d83" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d84 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d84" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d85 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d85" , "(and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d86 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d86" , "(or (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (or (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d81
[Aut::buildVmtNode] line = (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d82
[Aut::buildVmtNode] line = (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d83
[Aut::buildVmtNode] line = (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d84
[Aut::buildVmtNode] line = (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d85
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d87 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) (not s6) s7))"
[Aut::parse] tokenList = [ "d87" , "(and (not s5) (not s6) s7)" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) (not s6) s7)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d88 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d75 s0 s1 s2 s3 s4) (d80 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d88" , "(and (not s8) (d75 s0 s1 s2 s3 s4) (d80 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d75 s0 s1 s2 s3 s4) (d80 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d75 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d75
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d89 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d89" , "(and (not s2) (not s2.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d90 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d90" , "(and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d91 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d91" , "(and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d86
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d92 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d80 s5.next s6.next s7.next) (d87 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d92" , "(and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d80 s5.next s6.next s7.next) (d87 s5 s6 s7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d80 s5.next s6.next s7.next) (d87 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] d78 PARAM
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::buildVmtNode] line = (d87 s5 s6 s7)
[Aut::buildVmtNode] root = d87
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d93 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y8 Bool) (y9 Bool) (y10 Bool) (y11 Bool) (y12 Bool) (y13 Bool) (y14 Bool) (y15 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d93" , "(and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y8" , "y9" , "y10" , "y11" , "y12" , "y13" , "y14" , "y15" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d78 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] d78 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d94 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d94" , "(and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] d78 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d95 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y8 Bool) (y9 Bool) (y10 Bool) (y11 Bool) (y12 Bool) (y13 Bool) (y14 Bool) (y15 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (or (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d93 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)))"
[Aut::parse] tokenList = [ "d95" , "(or (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d93 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y8" , "y9" , "y10" , "y11" , "y12" , "y13" , "y14" , "y15" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d93 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d89
[Aut::buildVmtNode] line = (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d90
[Aut::buildVmtNode] line = (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d91
[Aut::buildVmtNode] line = (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d92
[Aut::buildVmtNode] line = (d93 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d93
[Aut::buildVmtNode] line = (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d94
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d96 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d79 s0 s1 s2 s3 s4) (d80 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d96" , "(and (not s8) (d79 s0 s1 s2 s3 s4) (d80 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d79 s0 s1 s2 s3 s4) (d80 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d79 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d79
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d97 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool)) Bool (and (not s9) (d0 s0 s1 s2 s3 s4)))"
[Aut::parse] tokenList = [ "d97" , "(and (not s9) (d0 s0 s1 s2 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s9" ]
[Aut::buildVmtNode] line = (and (not s9) (d0 s0 s1 s2 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (d0 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d98 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s9.next Bool) (n0.next Int)) Bool (and (not s9) (not s9.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d98" , "(and (not s9) (not s9.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s9) (not s9.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (not s9.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d19
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d99 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y8 Bool) (y9 Bool) (y10 Bool) (y11 Bool) (y12 Bool) (y13 Bool) (y14 Bool) (y15 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (and s9 s9.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)))"
[Aut::parse] tokenList = [ "d99" , "(and s9 s9.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y8" , "y9" , "y10" , "y11" , "y12" , "y13" , "y14" , "y15" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s9 s9.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = (d95 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d95
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d100 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d20 s0 s1 s2 s3 s4) (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d100" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d20 s0 s1 s2 s3 s4) (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d20 s0 s1 s2 s3 s4) (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = (d20 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d20
[Aut::buildVmtNode] line = (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next)
[Aut::buildVmtNode] root = d88
[Aut::buildVmtNode] d88 PARAM
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d101 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y8 Bool) (y9 Bool) (y10 Bool) (y11 Bool) (y12 Bool) (y13 Bool) (y14 Bool) (y15 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)))"
[Aut::parse] tokenList = [ "d101" , "(or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y8" , "y9" , "y10" , "y11" , "y12" , "y13" , "y14" , "y15" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next)
[Aut::buildVmtNode] root = d98
[Aut::buildVmtNode] line = (d99 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)
[Aut::buildVmtNode] root = d99
[Aut::buildVmtNode] line = (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)
[Aut::buildVmtNode] root = d100
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d102 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and s9 (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8)))"
[Aut::parse] tokenList = [ "d102" , "(and s9 (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" ]
[Aut::buildVmtNode] line = (and s9 (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8)
[Aut::buildVmtNode] root = d96
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d97 s0 s1 s2 s3 s4 s9) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d97 s0 s1 s2 s3 s4 s9) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d97 s0 s1 s2 s3 s4 s9) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d97 s0 s1 s2 s3 s4 s9)
[Aut::buildVmtNode] root = d97
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d101 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d101 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d101 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d101 x0 x1 x2 x3 x4 x5 x6 x7 y8 y9 y10 y11 y12 y13 y14 y15 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)
[Aut::buildVmtNode] root = d101
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9)
[Aut::buildVmtNode] root = d102
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=80
[Aut::buildParam] ++gflag=81
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3 () Bool)"
[Aut::parse] tokenList = [ "s3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3.next () Bool)"
[Aut::parse] tokenList = [ "s3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (not s0) s1 (not s2) s3))"
[Aut::parse] tokenList = [ "d0" , "(and (not s0) s1 (not s2) s3)" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2) s3)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 (not s0) s1 s2 s3 (not s0.next) s1.next s2.next (not s3.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 (not s0) s1 s2 s3 (not s0.next) s1.next s2.next (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 (not s0) s1 s2 s3 (not s0.next) s1.next s2.next (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) s1 (not s2) s3 s0.next (not s1.next) (not s2.next) s3.next))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) s1 (not s2) s3 s0.next (not s1.next) (not s2.next) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) s1 (not s2) s3 s0.next (not s1.next) (not s2.next) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s0 (not s1) (not s2) s3 (not s0.next) (not s1.next) (not s2.next) (not s3.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s0 (not s1) (not s2) s3 (not s0.next) (not s1.next) (not s2.next) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s0 (not s1) (not s2) s3 (not s0.next) (not s1.next) (not s2.next) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s0.next (not s1.next) (not s2.next) (not s3.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s0.next (not s1.next) (not s2.next) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s0.next (not s1.next) (not s2.next) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 s0 (not s1) (not s2) (not s3) (not s0.next) (not s1.next) s2.next s3.next))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 s0 (not s1) (not s2) (not s3) (not s0.next) (not s1.next) s2.next s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 s0 (not s1) (not s2) (not s3) (not s0.next) (not s1.next) s2.next s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s0.next) (not s1.next) (not s2.next) s3.next))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s0.next) (not s1.next) (not s2.next) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s0.next) (not s1.next) (not s2.next) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s0.next) s1.next s2.next s3.next))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s0.next) s1.next s2.next s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s0.next) s1.next s2.next s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) s2 (not s3) (not s0.next) s1.next (not s2.next) (not s3.next)))"
[Aut::parse] tokenList = [ "d8" , "(and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) s2 (not s3) (not s0.next) s1.next (not s2.next) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) s2 (not s3) (not s0.next) s1.next (not s2.next) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) s3 (not s0.next) (not s1.next) s2.next (not s3.next)))"
[Aut::parse] tokenList = [ "d9" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) s3 (not s0.next) (not s1.next) s2.next (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) s3 (not s0.next) (not s1.next) s2.next (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)))"
[Aut::parse] tokenList = [ "d10" , "(or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d7
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d9
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (not s0) (not s1) s2 s3))"
[Aut::parse] tokenList = [ "d11" , "(and (not s0) (not s1) s2 s3)" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2 s3)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d0 s0 s1 s2 s3) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d0 s0 s1 s2 s3) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d0 s0 s1 s2 s3) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d0 s0 s1 s2 s3)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d10
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d11 s0 s1 s2 s3)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d11 s0 s1 s2 s3)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d11 s0 s1 s2 s3)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d11 s0 s1 s2 s3))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d11 s0 s1 s2 s3)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=83
[Aut::buildParam] ++gflag=84
[Aut::defineFun] name=tmp1 body=(and (not s10) tmpI1)
[Aut::buildVmtNode] line = (and (not s10) tmpI1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s10)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = tmpI1
[Aut::defineFun] name=I body=(! tmp1 :init true)
[Aut::buildVmtNode] line = (! tmp1 :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp1
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp2 body=(and (not s10) (not s10.next) tmpT1)
[Aut::buildVmtNode] line = (and (not s10) (not s10.next) tmpT1)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s10)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = (not s10.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10.next
[Aut::buildVmtNode] line = tmpT1
[Aut::defineFun] name=tmp3 body=(and s10 s10.next tmpT2 (= n0.next n0))
[Aut::buildVmtNode] line = (and s10 s10.next tmpT2 (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = s10.next
[Aut::buildVmtNode] line = tmpT2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::defineFun] name=tmp4 body=(and epsilon (not s10) s10.next tmpO1 I2_PARAM (= n0.next n0))
[Aut::buildVmtNode] line = (and epsilon (not s10) s10.next tmpO1 I2_PARAM (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = epsilon
[Aut::buildVmtNode] line = (not s10)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = s10.next
[Aut::buildVmtNode] line = tmpO1
[Aut::buildVmtNode] line = I2_PARAM
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::defineFun] name=tmp5 body=(or tmp2 tmp3 tmp4)
[Aut::buildVmtNode] line = (or tmp2 tmp3 tmp4)
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = tmp2
[Aut::buildVmtNode] line = tmp3
[Aut::buildVmtNode] line = tmp4
[Aut::defineFun] name=T body=(! tmp5 :trans true)
[Aut::buildVmtNode] line = (! tmp5 :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = tmp5
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::defineFun] name=tmp6 body=(and s10 tmpO2)
[Aut::buildVmtNode] line = (and s10 tmpO2)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = tmpO2
[Aut::defineFun] name=O body=(! (not tmp6) :invar-property 0)
[Aut::buildVmtNode] line = (! (not tmp6) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not tmp6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = tmp6
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=85
[Aut::buildParam] ++gflag=86
write x_14 
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] epsilon 0x1e7ff00 MODULE 86
name=epsilon typeMODULE
and AND 86
   x0 INPUT 78
   not NOT 86
      x1 INPUT 78
   not NOT 86
      x2 INPUT 78
   not NOT 86
      x3 INPUT 78
   not NOT 86
      x4 INPUT 78
   not NOT 86
      x5 INPUT 78
   not NOT 86
      x6 INPUT 78
   not NOT 86
      x7 INPUT 78
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] leftAngle 0x1e80de0 MODULE 86
name=leftAngle typeMODULE
and AND 86
   x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] rightAngle 0x1e81b60 MODULE 86
name=rightAngle typeMODULE
and AND 86
   x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d0 0x1fac0d0 MODULE 86
name=d0 typeMODULE
and AND 86
   not NOT 86
      s0 STATE 78
   not NOT 86
      s1 STATE 78
   s2 STATE 78
   not NOT 86
      s3 STATE 78
   not NOT 86
      s4 STATE 78
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d1 0x1fad030 MODULE 86
name=d1 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 78
   not NOT 86
      s1.next STATE_N 78
   s2.next STATE_N 78
   s3.next STATE_N 78
   s4.next STATE_N 78
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d2 0x1facf80 MODULE 86
name=d2 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d3 0x1fae2e0 MODULE 86
name=d3 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d4 0x1fb0fc0 MODULE 86
name=d4 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d5 0x1fb2430 MODULE 86
name=d5 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d6 0x1fb3670 MODULE 86
name=d6 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d7 0x1fb4c30 MODULE 86
name=d7 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d8 0x1fb6050 MODULE 86
name=d8 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d9 0x1fb7510 MODULE 86
name=d9 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d10 0x1fb8a60 MODULE 86
name=d10 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d11 0x1fba1a0 MODULE 86
name=d11 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d12 0x1fbb8e0 MODULE 86
name=d12 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d13 0x1fbd000 MODULE 86
name=d13 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d14 0x1facbe0 MODULE 86
name=d14 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d15 0x1fc01c0 MODULE 86
name=d15 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d16 0x1fc1e10 MODULE 86
name=d16 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d17 0x1fb7480 MODULE 86
name=d17 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d18 0x1facb10 MODULE 86
name=d18 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d19 0x1fc4660 MODULE 86
name=d19 typeMODULE
or OR 86
   d1 MODULE 87
   d2 MODULE 87
   d3 MODULE 87
   d4 MODULE 87
   d5 MODULE 87
   d6 MODULE 87
   d7 MODULE 87
   d8 MODULE 87
   d9 MODULE 87
   d10 MODULE 87
   d11 MODULE 87
   d12 MODULE 87
   d13 MODULE 87
   d14 MODULE 87
   d15 MODULE 87
   d16 MODULE 87
   d17 MODULE 87
   d18 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d20 0x1fc6530 MODULE 86
name=d20 typeMODULE
and AND 86
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d21 0x1fc9ea0 MODULE 86
name=d21 typeMODULE
not NOT 86
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d22 0x1fca200 MODULE 86
name=d22 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d23 0x1fcad20 MODULE 86
name=d23 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d24 0x1fcb830 MODULE 86
name=d24 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d25 0x1fcc1e0 MODULE 86
name=d25 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d26 0x1fccc80 MODULE 86
name=d26 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d27 0x1fcd750 MODULE 86
name=d27 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d28 0x1fce3b0 MODULE 86
name=d28 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d29 0x1fcefe0 MODULE 86
name=d29 typeMODULE
or OR 86
   d22 MODULE 87
   d23 MODULE 87
   d24 MODULE 87
   d25 MODULE 87
   d26 MODULE 87
   d27 MODULE 87
   d28 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d30 0x1fceee0 MODULE 86
name=d30 typeMODULE
not NOT 86
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d31 0x1fd04e0 MODULE 86
name=d31 typeMODULE
not NOT 86
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d32 0x1fd0880 MODULE 86
name=d32 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d33 0x1fc31f0 MODULE 86
name=d33 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d34 0x1fd2180 MODULE 86
name=d34 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d35 0x1fd2bf0 MODULE 86
name=d35 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d36 0x1fd3690 MODULE 86
name=d36 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d37 0x1fd4160 MODULE 86
name=d37 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d38 0x1fd4dc0 MODULE 86
name=d38 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d39 0x1fd59f0 MODULE 86
name=d39 typeMODULE
or OR 86
   d32 MODULE 87
   d33 MODULE 87
   d34 MODULE 87
   d35 MODULE 87
   d36 MODULE 87
   d37 MODULE 87
   d38 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d40 0x1fd58f0 MODULE 86
name=d40 typeMODULE
not NOT 86
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d41 0x1fd6f40 MODULE 86
name=d41 typeMODULE
or OR 86
   and AND 86
      not NOT 86
         s1 STATE 87
name=s1 0x1e968c0 type=STATE
      d21 MODULE 87
   and AND 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
      d31 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d42 0x1fd7b50 MODULE 86
name=d42 typeMODULE
and AND 86
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   d29 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d43 0x1fd8790 MODULE 86
name=d43 typeMODULE
and AND 86
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   d39 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d44 0x1fd8eb0 MODULE 86
name=d44 typeMODULE
or OR 86
   d42 MODULE 87
   d43 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d45 0x1fd9710 MODULE 86
name=d45 typeMODULE
or OR 86
   and AND 86
      not NOT 86
         s1 STATE 87
name=s1 0x1e968c0 type=STATE
      d30 MODULE 87
   and AND 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
      d40 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d46 0x1fda190 MODULE 86
name=d46 typeMODULE
and AND 86
   not NOT 86
      epsilon MODULE 87
   = EQ 86
      n0.next LEN_N 78
      + PLUS 86
         n0 LEN 78
         1 NUM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d47 0x1fdad70 MODULE 86
name=d47 typeMODULE
and AND 86
   epsilon MODULE 87
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d48 0x1fdb610 MODULE 86
name=d48 typeMODULE
and AND 86
   d44 MODULE 87
   or OR 86
      d46 MODULE 87
      d47 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d49 0x1fdb590 MODULE 86
name=d49 typeMODULE
and AND 86
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   d41 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d50 0x1fdc9b0 MODULE 86
name=d50 typeMODULE
and AND 86
   = EQ 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      leftAngle MODULE 87
   not NOT 86
      rightAngle MODULE 87
   d48 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d51 0x1fdd990 MODULE 86
name=d51 typeMODULE
or OR 86
   and AND 86
      not NOT 86
         s2 STATE 87
name=s2 0x1ec9f10 type=STATE
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
      leftAngle MODULE 87
   and AND 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
      not NOT 86
         s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
      rightAngle MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d52 0x1fde6a0 MODULE 86
name=d52 typeMODULE
and AND 86
   = EQ 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   = EQ 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
   d51 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d53 0x1fdc8e0 MODULE 86
name=d53 typeMODULE
or OR 86
   d50 MODULE 87
   d52 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d54 0x1fdf340 MODULE 86
name=d54 typeMODULE
and AND 86
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   d45 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d55 0x1fe0230 MODULE 86
name=d55 typeMODULE
not NOT 86
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d56 0x1fe0570 MODULE 86
name=d56 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d57 0x1fe04f0 MODULE 86
name=d57 typeMODULE
s3 STATE 87
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d58 0x1fe1660 MODULE 86
name=d58 typeMODULE
not NOT 86
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d59 0x1fe19f0 MODULE 86
name=d59 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d60 0x1fe2220 MODULE 86
name=d60 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d61 0x1fe2af0 MODULE 86
name=d61 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d62 0x1fe33c0 MODULE 86
name=d62 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d63 0x1fe3c90 MODULE 86
name=d63 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d64 0x1fe4560 MODULE 86
name=d64 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d65 0x1fd1420 MODULE 86
name=d65 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d66 0x1fe5b00 MODULE 86
name=d66 typeMODULE
or OR 86
   d59 MODULE 87
   d60 MODULE 87
   d61 MODULE 87
   d62 MODULE 87
   d63 MODULE 87
   d64 MODULE 87
   d65 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d67 0x1fe5a30 MODULE 86
name=d67 typeMODULE
not NOT 86
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d68 0x1fe6f10 MODULE 86
name=d68 typeMODULE
and AND 86
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   d58 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d69 0x1fe7740 MODULE 86
name=d69 typeMODULE
and AND 86
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
   not NOT 86
      leftAngle MODULE 87
   not NOT 86
      rightAngle MODULE 87
   d66 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d70 0x1fe8a40 MODULE 86
name=d70 typeMODULE
and AND 86
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
   not NOT 86
      leftAngle MODULE 87
   not NOT 86
      rightAngle MODULE 87
   d56 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d71 0x1fe9780 MODULE 86
name=d71 typeMODULE
and AND 86
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
   leftAngle MODULE 87
   d67 MODULE 87
   d55 PARAM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d72 0x1fea1a0 MODULE 86
name=d72 typeMODULE
and AND 86
   s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   not NOT 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
   rightAngle MODULE 87
   d57 MODULE 87
   d58 PARAM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d73 0x1fe7680 MODULE 86
name=d73 typeMODULE
or OR 86
   d69 MODULE 87
   d70 MODULE 87
   d71 MODULE 87
   d72 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d74 0x1feacd0 MODULE 86
name=d74 typeMODULE
and AND 86
   not NOT 86
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   d67 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d75 0x1febff0 MODULE 86
name=d75 typeMODULE
and AND 86
   d49 MODULE 87
   d68 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d76 0x1fec6e0 MODULE 86
name=d76 typeMODULE
or OR 86
   d53 MODULE 87
   and AND 86
      epsilon MODULE 87
      = EQ 86
         s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
         s0 STATE 87
name=s0 0x1e87ae0 type=STATE
      = EQ 86
         s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
         s1 STATE 87
name=s1 0x1e968c0 type=STATE
      = EQ 86
         s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
         s2 STATE 87
name=s2 0x1ec9f10 type=STATE
      = EQ 86
         n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
         n0 LEN 87
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d77 0x1fed870 MODULE 86
name=d77 typeMODULE
or OR 86
   d73 MODULE 87
   and AND 86
      epsilon MODULE 87
      = EQ 86
         s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
         s3 STATE 87
name=s3 0x1ee6e70 type=STATE
      = EQ 86
         s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
         s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d78 0x1fec600 MODULE 86
name=d78 typeMODULE
and AND 86
   d76 MODULE 87
   d77 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d79 0x1fef120 MODULE 86
name=d79 typeMODULE
and AND 86
   d54 MODULE 87
   d74 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d80 0x1fef7b0 MODULE 86
name=d80 typeMODULE
and AND 86
   not NOT 86
      s5 STATE 78
   s6 STATE 78
   not NOT 86
      s7 STATE 78
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d81 0x1fefe20 MODULE 86
name=d81 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s5 STATE 87
name=s5 0x1eed870 type=STATE
   s6 STATE 87
name=s6 0x1eebde0 type=STATE
   s7 STATE 87
name=s7 0x1eebf60 type=STATE
   not NOT 86
      s5.next STATE_N 78
   not NOT 86
      s6.next STATE_N 78
   s7.next STATE_N 78
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d82 0x1ff09c0 MODULE 86
name=d82 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 87
name=s5 0x1eed870 type=STATE
   not NOT 86
      s6 STATE 87
name=s6 0x1eebde0 type=STATE
   not NOT 86
      s7 STATE 87
name=s7 0x1eebf60 type=STATE
   not NOT 86
      s5.next STATE_N 87
name=s5.next 0x1eec170 type=STATE_N
   s6.next STATE_N 87
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 87
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d83 0x1ff1b20 MODULE 86
name=d83 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s5 STATE 87
name=s5 0x1eed870 type=STATE
   not NOT 86
      s6 STATE 87
name=s6 0x1eebde0 type=STATE
   s7 STATE 87
name=s7 0x1eebf60 type=STATE
   not NOT 86
      s5.next STATE_N 87
name=s5.next 0x1eec170 type=STATE_N
   not NOT 86
      s6.next STATE_N 87
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 86
      s7.next STATE_N 87
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d84 0x1ff2e70 MODULE 86
name=d84 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s5 STATE 87
name=s5 0x1eed870 type=STATE
   s6 STATE 87
name=s6 0x1eebde0 type=STATE
   not NOT 86
      s7 STATE 87
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 87
name=s5.next 0x1eec170 type=STATE_N
   not NOT 86
      s6.next STATE_N 87
name=s6.next 0x1eec2f0 type=STATE_N
   s7.next STATE_N 87
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d85 0x1ff4020 MODULE 86
name=d85 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s5 STATE 87
name=s5 0x1eed870 type=STATE
   not NOT 86
      s6 STATE 87
name=s6 0x1eebde0 type=STATE
   not NOT 86
      s7 STATE 87
name=s7 0x1eebf60 type=STATE
   s5.next STATE_N 87
name=s5.next 0x1eec170 type=STATE_N
   not NOT 86
      s6.next STATE_N 87
name=s6.next 0x1eec2f0 type=STATE_N
   not NOT 86
      s7.next STATE_N 87
name=s7.next 0x1eeccf0 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d86 0x1ff5440 MODULE 86
name=d86 typeMODULE
or OR 86
   d81 MODULE 87
   d82 MODULE 87
   d83 MODULE 87
   d84 MODULE 87
   d85 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d87 0x1ff5320 MODULE 86
name=d87 typeMODULE
and AND 86
   not NOT 86
      s5 STATE 87
name=s5 0x1eed870 type=STATE
   not NOT 86
      s6 STATE 87
name=s6 0x1eebde0 type=STATE
   s7 STATE 87
name=s7 0x1eebf60 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d88 0x1ff6b60 MODULE 86
name=d88 typeMODULE
and AND 86
   not NOT 86
      s8 STATE 78
   d75 MODULE 87
   d80 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d89 0x1ff7720 MODULE 86
name=d89 typeMODULE
and AND 86
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   d78 MODULE 87
   not NOT 86
      s8 STATE 87
name=s8 0x1eece40 type=STATE
   not NOT 86
      s8.next STATE_N 78
   d80 MODULE 87
   d80 PARAM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d90 0x1ff7630 MODULE 86
name=d90 typeMODULE
and AND 86
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 87
   = EQ 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   = EQ 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   = EQ 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   = EQ 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   = EQ 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
   not NOT 86
      s8 STATE 87
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 87
name=s8.next 0x1eecf90 type=STATE_N
   d80 MODULE 87
   d80 PARAM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d91 0x1ffa230 MODULE 86
name=d91 typeMODULE
and AND 86
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   = EQ 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   = EQ 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   = EQ 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   = EQ 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   = EQ 86
      s4.next STATE_N 87
name=s4.next 0x1ee80f0 type=STATE_N
      s4 STATE 87
name=s4 0x1ee6fc0 type=STATE
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
   s8 STATE 87
name=s8 0x1eece40 type=STATE
   s8.next STATE_N 87
name=s8.next 0x1eecf90 type=STATE_N
   d86 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d92 0x1ff89a0 MODULE 86
name=d92 typeMODULE
and AND 86
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 87
   d78 PARAM 0
   s8 STATE 87
name=s8 0x1eece40 type=STATE
   not NOT 86
      s8.next STATE_N 87
name=s8.next 0x1eecf90 type=STATE_N
   d80 PARAM 0
   d87 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d93 0x1face70 MODULE 86
name=d93 typeMODULE
and AND 86
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 87
   d78 PARAM 0
   not NOT 86
      s8 STATE 87
name=s8 0x1eece40 type=STATE
   not NOT 86
      s8.next STATE_N 87
name=s8.next 0x1eecf90 type=STATE_N
   d80 MODULE 87
   d80 PARAM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d94 0x1ffb940 MODULE 86
name=d94 typeMODULE
and AND 86
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   epsilon MODULE 87
   d78 PARAM 0
   not NOT 86
      s8 STATE 87
name=s8 0x1eece40 type=STATE
   not NOT 86
      s8.next STATE_N 87
name=s8.next 0x1eecf90 type=STATE_N
   d80 MODULE 87
   d80 PARAM 0
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d95 0x1ffdbe0 MODULE 86
name=d95 typeMODULE
or OR 86
   d89 MODULE 87
   d90 MODULE 87
   d91 MODULE 87
   d92 MODULE 87
   d93 MODULE 87
   d94 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d96 0x1ffeca0 MODULE 86
name=d96 typeMODULE
and AND 86
   not NOT 86
      s8 STATE 87
name=s8 0x1eece40 type=STATE
   d79 MODULE 87
   d80 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d97 0x2001050 MODULE 86
name=d97 typeMODULE
and AND 86
   not NOT 86
      s9 STATE 51
   d0 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d98 0x2001780 MODULE 86
name=d98 typeMODULE
and AND 86
   not NOT 86
      s9 STATE 87
name=s9 0x1f54fd0 type=STATE
   not NOT 86
      s9.next STATE_N 51
   d19 MODULE 87
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d99 0x20022b0 MODULE 86
name=d99 typeMODULE
and AND 86
   s9 STATE 87
name=s9 0x1f54fd0 type=STATE
   s9.next STATE_N 87
name=s9.next 0x1f55120 type=STATE_N
   d95 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d100 0x2002ef0 MODULE 86
name=d100 typeMODULE
and AND 86
   epsilon MODULE 87
   not NOT 86
      s9 STATE 87
name=s9 0x1f54fd0 type=STATE
   s9.next STATE_N 87
name=s9.next 0x1f55120 type=STATE_N
   d20 MODULE 87
   d88 PARAM 0
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d101 0x20021d0 MODULE 86
name=d101 typeMODULE
or OR 86
   d98 MODULE 87
   d99 MODULE 87
   d100 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d102 0x2003c20 MODULE 86
name=d102 typeMODULE
and AND 86
   s9 STATE 87
name=s9 0x1f54fd0 type=STATE
   d96 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d103 0x1fc61b0 MODULE 86
name=d103 typeMODULE
and AND 86
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d104 0x2010f30 MODULE 86
name=d104 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d105 0x2010e00 MODULE 86
name=d105 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d106 0x2013020 MODULE 86
name=d106 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   not NOT 86
      x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d107 0x2012f90 MODULE 86
name=d107 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d108 0x2015cc0 MODULE 86
name=d108 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   not NOT 86
      x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d109 0x2017080 MODULE 86
name=d109 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d110 0x20183d0 MODULE 86
name=d110 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d111 0x2019720 MODULE 86
name=d111 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   not NOT 86
      x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   not NOT 86
      s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   not NOT 86
      s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d112 0x20196a0 MODULE 86
name=d112 typeMODULE
and AND 86
   not NOT 86
      x0 INPUT 87
name=x0 0x1e7ef60 type=INPUT
   x1 INPUT 87
name=x1 0x1e7f190 type=INPUT
   x2 INPUT 87
name=x2 0x1e7f2e0 type=INPUT
   not NOT 86
      x3 INPUT 87
name=x3 0x1e7f490 type=INPUT
   x4 INPUT 87
name=x4 0x1e7f610 type=INPUT
   x5 INPUT 87
name=x5 0x1e7f7b0 type=INPUT
   not NOT 86
      x6 INPUT 87
name=x6 0x1e7f930 type=INPUT
   not NOT 86
      x7 INPUT 87
name=x7 0x1e7fab0 type=INPUT
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   not NOT 86
      s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
   not NOT 86
      s0.next STATE_N 87
name=s0.next 0x1e87c50 type=STATE_N
   not NOT 86
      s1.next STATE_N 87
name=s1.next 0x1e96a10 type=STATE_N
   s2.next STATE_N 87
name=s2.next 0x1eca0c0 type=STATE_N
   not NOT 86
      s3.next STATE_N 87
name=s3.next 0x1ee7180 type=STATE_N
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d113 0x201abf0 MODULE 86
name=d113 typeMODULE
or OR 86
   d104 MODULE 87
   d105 MODULE 87
   d106 MODULE 87
   d107 MODULE 87
   d108 MODULE 87
   d109 MODULE 87
   d110 MODULE 87
   d111 MODULE 87
   d112 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d114 0x201c5a0 MODULE 86
name=d114 typeMODULE
and AND 86
   not NOT 86
      s0 STATE 87
name=s0 0x1e87ae0 type=STATE
   not NOT 86
      s1 STATE 87
name=s1 0x1e968c0 type=STATE
   s2 STATE 87
name=s2 0x1ec9f10 type=STATE
   s3 STATE 87
name=s3 0x1ee6e70 type=STATE
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d115 0x201f940 MODULE 86
name=d115 typeMODULE
and AND 86
   not NOT 86
      s10 STATE 0
   d97 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d116 0x2020eb0 MODULE 86
name=d116 typeMODULE
and AND 86
   not NOT 86
      s10 STATE 87
name=s10 0x201c3c0 type=STATE
   not NOT 86
      s10.next STATE_N 0
   d101 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d117 0x2021650 MODULE 86
name=d117 typeMODULE
and AND 86
   s10 STATE 87
name=s10 0x201c3c0 type=STATE
   s10.next STATE_N 87
name=s10.next 0x201c510 type=STATE_N
   d113 MODULE 87
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d118 0x2021cb0 MODULE 86
name=d118 typeMODULE
and AND 86
   epsilon MODULE 87
   not NOT 86
      s10 STATE 87
name=s10 0x201c3c0 type=STATE
   s10.next STATE_N 87
name=s10.next 0x201c510 type=STATE_N
   d102 MODULE 87
   I2_PARAM PARAM 0
   = EQ 86
      n0.next LEN_N 87
name=n0.next 0x1e9e1f0 type=LEN_N
      n0 LEN 87
name=n0 0x1ea4630 type=LEN
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d119 0x2021c10 MODULE 86
name=d119 typeMODULE
or OR 86
   d116 MODULE 87
   d117 MODULE 87
   d118 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] d120 0x2022ba0 MODULE 86
name=d120 typeMODULE
and AND 86
   s10 STATE 87
name=s10 0x201c3c0 type=STATE
   d114 MODULE 87
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] I 0x2020910 MODULE 86
! EXCM 86
   d115 MODULE 87
   :init SPECIAL 0
   true CONST1 78
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] T 0x2022660 MODULE 86
! EXCM 86
   d119 MODULE 87
   :trans SPECIAL 0
   true CONST1 87
name=true 0x1e7fd80 type=CONST1
[Aut::writeDefineFun] gflag=87
[Aut::writeDefineFun] O 0x2022ec0 MODULE 86
! EXCM 86
   not NOT 86
      d120 MODULE 87
   :invar-property SPECIAL 0
   0 NUM 0
concate x_14 x_13 
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y24 () Bool)"
[Aut::parse] tokenList = [ "y24" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y24.next () Bool)"
[Aut::parse] tokenList = [ "y24.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y25 () Bool)"
[Aut::parse] tokenList = [ "y25" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y25.next () Bool)"
[Aut::parse] tokenList = [ "y25.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y26 () Bool)"
[Aut::parse] tokenList = [ "y26" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y26.next () Bool)"
[Aut::parse] tokenList = [ "y26.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y27 () Bool)"
[Aut::parse] tokenList = [ "y27" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y27.next () Bool)"
[Aut::parse] tokenList = [ "y27.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y28 () Bool)"
[Aut::parse] tokenList = [ "y28" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y28.next () Bool)"
[Aut::parse] tokenList = [ "y28.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y29 () Bool)"
[Aut::parse] tokenList = [ "y29" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y29.next () Bool)"
[Aut::parse] tokenList = [ "y29.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y30 () Bool)"
[Aut::parse] tokenList = [ "y30" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y30.next () Bool)"
[Aut::parse] tokenList = [ "y30.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y31 () Bool)"
[Aut::parse] tokenList = [ "y31" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y31.next () Bool)"
[Aut::parse] tokenList = [ "y31.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3 () Bool)"
[Aut::parse] tokenList = [ "s3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3.next () Bool)"
[Aut::parse] tokenList = [ "s3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4 () Bool)"
[Aut::parse] tokenList = [ "s4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4.next () Bool)"
[Aut::parse] tokenList = [ "s4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5 () Bool)"
[Aut::parse] tokenList = [ "s5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5.next () Bool)"
[Aut::parse] tokenList = [ "s5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6 () Bool)"
[Aut::parse] tokenList = [ "s6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6.next () Bool)"
[Aut::parse] tokenList = [ "s6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7 () Bool)"
[Aut::parse] tokenList = [ "s7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7.next () Bool)"
[Aut::parse] tokenList = [ "s7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8 () Bool)"
[Aut::parse] tokenList = [ "s8" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8.next () Bool)"
[Aut::parse] tokenList = [ "s8.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s9 () Bool)"
[Aut::parse] tokenList = [ "s9" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s9.next () Bool)"
[Aut::parse] tokenList = [ "s9.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s10 () Bool)"
[Aut::parse] tokenList = [ "s10" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s10.next () Bool)"
[Aut::parse] tokenList = [ "s10.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0 () Int)"
[Aut::parse] tokenList = [ "n0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0.next () Int)"
[Aut::parse] tokenList = [ "n0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))"
[Aut::parse] tokenList = [ "epsilon" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun leftAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7))"
[Aut::parse] tokenList = [ "leftAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun rightAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7)))"
[Aut::parse] tokenList = [ "rightAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s0) (not s1) s2 (not s3) (not s4)))"
[Aut::parse] tokenList = [ "d0" , "(and (not s0) (not s1) s2 (not s3) (not s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2 (not s3) (not s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) x3 x4 (not x5) x6 x7 (not s0) (not s1) s2 (not s3) (not s4) (not s0.next) (not s1.next) s2.next s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 x6 (not x7) s0 (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 (not x7) (not s0) (not s1) s2 s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 (not s2) s3 s4 s0.next (not s1.next) (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 x6 x7 s0 (not s1) (not s2) s3 (not s4) (not s0.next) (not s1.next) s2.next s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 s0 (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 s2 s3 (not s4) (not s0.next) (not s1.next) (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next))"
[Aut::parse] tokenList = [ "d8" , "(and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) (not x5) x6 (not x7) (not s0) s1 s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next))"
[Aut::parse] tokenList = [ "d9" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s4) (not s0.next) s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d10" , "(and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 (not s2) s3 (not s4) s0.next (not s1.next) (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) (not s1) (not s2) s3 (not s4) (not s0.next) s1.next (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) (not s2) s3 s4 s0.next (not s1.next) (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) (not x5) (not x6) x7 (not s0) s1 s2 s3 s4 (not s0.next) (not s1.next) s2.next (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 s3 s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) (not s0) (not s1) s2 (not s3) s4 (not s0.next) (not s1.next) (not s2.next) (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s4) (not s0.next) s1.next (not s2.next) s3.next s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s4 (not s0.next) s1.next (not s2.next) s3.next (not s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next))"
[Aut::parse] tokenList = [ "d18" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) s4 (not s0.next) s1.next s2.next (not s3.next) s4.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s4.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)))"
[Aut::parse] tokenList = [ "d19" , "(or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d7
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d8
[Aut::buildVmtNode] line = (d9 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (d10 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d10
[Aut::buildVmtNode] line = (d11 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d17
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (not s0) s1 (not s2) (not s3) (not s4)))"
[Aut::parse] tokenList = [ "d20" , "(and (not s0) s1 (not s2) (not s3) (not s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2) (not s3) (not s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d21" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d23" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d24" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d25 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d25" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d26 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d26" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d27 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d27" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d28 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d28" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d22 x0 x1 x3 x5 x7 s0 s0.next) (d23 x0 x1 x5 x6 x7 s0 s0.next) (d24 x0 x1 x4 x5 s0 s0.next) (d25 x0 x1 x3 x4 s0 s0.next) (d26 x0 x1 x4 x6 s0 s0.next) (d27 x0 x2 x3 x5 x6 s0 s0.next) (d28 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d29" , "(or (d22 x0 x1 x3 x5 x7 s0 s0.next) (d23 x0 x1 x5 x6 x7 s0 s0.next) (d24 x0 x1 x4 x5 s0 s0.next) (d25 x0 x1 x3 x4 s0 s0.next) (d26 x0 x1 x4 x6 s0 s0.next) (d27 x0 x2 x3 x5 x6 s0 s0.next) (d28 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d22 x0 x1 x3 x5 x7 s0 s0.next) (d23 x0 x1 x5 x6 x7 s0 s0.next) (d24 x0 x1 x4 x5 s0 s0.next) (d25 x0 x1 x3 x4 s0 s0.next) (d26 x0 x1 x4 x6 s0 s0.next) (d27 x0 x2 x3 x5 x6 s0 s0.next) (d28 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d22 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d22
[Aut::buildVmtNode] line = (d23 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = (d24 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d24
[Aut::buildVmtNode] line = (d25 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d25
[Aut::buildVmtNode] line = (d26 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d26
[Aut::buildVmtNode] line = (d27 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d27
[Aut::buildVmtNode] line = (d28 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d28
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d30 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d30" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d31 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d31" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d32 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d32" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d33 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d33" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d34 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d34" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d35 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d35" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d36 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d36" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d37 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d37" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d38 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d38" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d39 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d32 x0 x1 x3 x5 x7 s0 s0.next) (d33 x0 x1 x5 x6 x7 s0 s0.next) (d34 x0 x1 x4 x5 s0 s0.next) (d35 x0 x1 x3 x4 s0 s0.next) (d36 x0 x1 x4 x6 s0 s0.next) (d37 x0 x2 x3 x5 x6 s0 s0.next) (d38 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d39" , "(or (d32 x0 x1 x3 x5 x7 s0 s0.next) (d33 x0 x1 x5 x6 x7 s0 s0.next) (d34 x0 x1 x4 x5 s0 s0.next) (d35 x0 x1 x3 x4 s0 s0.next) (d36 x0 x1 x4 x6 s0 s0.next) (d37 x0 x2 x3 x5 x6 s0 s0.next) (d38 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d32 x0 x1 x3 x5 x7 s0 s0.next) (d33 x0 x1 x5 x6 x7 s0 s0.next) (d34 x0 x1 x4 x5 s0 s0.next) (d35 x0 x1 x3 x4 s0 s0.next) (d36 x0 x1 x4 x6 s0 s0.next) (d37 x0 x2 x3 x5 x6 s0 s0.next) (d38 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d32 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d32
[Aut::buildVmtNode] line = (d33 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d33
[Aut::buildVmtNode] line = (d34 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d34
[Aut::buildVmtNode] line = (d35 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d35
[Aut::buildVmtNode] line = (d36 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d36
[Aut::buildVmtNode] line = (d37 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d37
[Aut::buildVmtNode] line = (d38 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d38
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d40 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d40" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d41 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d21 s0)) (and s1 (d31 s0))))"
[Aut::parse] tokenList = [ "d41" , "(or (and (not s1) (d21 s0)) (and s1 (d31 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d21 s0)) (and s1 (d31 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d21 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d21 s0)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (and s1 (d31 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d31 s0)
[Aut::buildVmtNode] root = d31
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d42 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d42" , "(and (not s1) (not s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d29
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d43 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d43" , "(and s1 s1.next (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d39 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d39
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d44 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d44" , "(or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d42 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d42
[Aut::buildVmtNode] line = (d43 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d43
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d45 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d30 s0)) (and s1 (d40 s0))))"
[Aut::parse] tokenList = [ "d45" , "(or (and (not s1) (d30 s0)) (and s1 (d40 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d30 s0)) (and s1 (d40 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d30 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d30 s0)
[Aut::buildVmtNode] root = d30
[Aut::buildVmtNode] line = (and s1 (d40 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d40 s0)
[Aut::buildVmtNode] root = d40
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d46 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))"
[Aut::parse] tokenList = [ "d46" , "(and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d47 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d47" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (n0.next Int)) Bool (and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))"
[Aut::parse] tokenList = [ "d48" , "(and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "n0" , "s0.next" , "s1.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d44 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d44
[Aut::buildVmtNode] line = (or (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d46 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d46
[Aut::buildVmtNode] line = (d47 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d47
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d49 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d41 s0 s1)))"
[Aut::parse] tokenList = [ "d49" , "(and (not s2) (d41 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d41 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d41 s0 s1)
[Aut::buildVmtNode] root = d41
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)))"
[Aut::parse] tokenList = [ "d50" , "(and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d48 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)
[Aut::buildVmtNode] root = d48
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))))"
[Aut::parse] tokenList = [ "d51" , "(or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s2" , "s2.next" ]
[Aut::buildVmtNode] line = (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))"
[Aut::parse] tokenList = [ "d52" , "(and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (d51 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)
[Aut::buildVmtNode] root = d51
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d53 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)))"
[Aut::parse] tokenList = [ "d53" , "(or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d50 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d50
[Aut::buildVmtNode] line = (d52 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d52
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d54 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d45 s0 s1)))"
[Aut::parse] tokenList = [ "d54" , "(and (not s2) (d45 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d45 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d45 s0 s1)
[Aut::buildVmtNode] root = d45
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d55 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d55" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next))"
[Aut::parse] tokenList = [ "d56" , "(and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d57 ((s3 Bool)) Bool s3)"
[Aut::parse] tokenList = [ "d57" , "s3" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d58 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d58" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d59 ((x0 Bool) (x2 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x2 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d59" , "(and (not x0) x2 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d60 ((x0 Bool) (x3 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d60" , "(and (not x0) x3 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x3" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x3 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d61 ((x0 Bool) (x4 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x4 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d61" , "(and (not x0) x4 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x4" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x4 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d62 ((x0 Bool) (x5 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x5 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d62" , "(and (not x0) x5 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x5" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x5 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d63 ((x0 Bool) (x6 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x6 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d63" , "(and (not x0) x6 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x6" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x6 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d64 ((x0 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x7 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d64" , "(and (not x0) x7 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x7 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d65 ((x0 Bool) (x1 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x1) (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d65" , "(and (not x0) (not x1) (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d66 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d59 x0 x2 s3 s3.next) (d60 x0 x3 s3 s3.next) (d61 x0 x4 s3 s3.next) (d62 x0 x5 s3 s3.next) (d63 x0 x6 s3 s3.next) (d64 x0 x7 s3 s3.next) (d65 x0 x1 s3 s3.next)))"
[Aut::parse] tokenList = [ "d66" , "(or (d59 x0 x2 s3 s3.next) (d60 x0 x3 s3 s3.next) (d61 x0 x4 s3 s3.next) (d62 x0 x5 s3 s3.next) (d63 x0 x6 s3 s3.next) (d64 x0 x7 s3 s3.next) (d65 x0 x1 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (or (d59 x0 x2 s3 s3.next) (d60 x0 x3 s3 s3.next) (d61 x0 x4 s3 s3.next) (d62 x0 x5 s3 s3.next) (d63 x0 x6 s3 s3.next) (d64 x0 x7 s3 s3.next) (d65 x0 x1 s3 s3.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d59 x0 x2 s3 s3.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d60 x0 x3 s3 s3.next)
[Aut::buildVmtNode] root = d60
[Aut::buildVmtNode] line = (d61 x0 x4 s3 s3.next)
[Aut::buildVmtNode] root = d61
[Aut::buildVmtNode] line = (d62 x0 x5 s3 s3.next)
[Aut::buildVmtNode] root = d62
[Aut::buildVmtNode] line = (d63 x0 x6 s3 s3.next)
[Aut::buildVmtNode] root = d63
[Aut::buildVmtNode] line = (d64 x0 x7 s3 s3.next)
[Aut::buildVmtNode] root = d64
[Aut::buildVmtNode] line = (d65 x0 x1 s3 s3.next)
[Aut::buildVmtNode] root = d65
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d67 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d67" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d68 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d58 s3)))"
[Aut::parse] tokenList = [ "d68" , "(and (not s4) (d58 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d58 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d58 s3)
[Aut::buildVmtNode] root = d58
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d69" , "(and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d66 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d66
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d70" , "(and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d56
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d67 s3) (d55 s3.next)))"
[Aut::parse] tokenList = [ "d71" , "(and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d67 s3) (d55 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d67 s3) (d55 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (d67 s3)
[Aut::buildVmtNode] root = d67
[Aut::buildVmtNode] line = (d55 s3.next)
[Aut::buildVmtNode] root = d55
[Aut::buildVmtNode] d55 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d72 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d57 s3) (d58 s3.next)))"
[Aut::parse] tokenList = [ "d72" , "(and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d57 s3) (d58 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d57 s3) (d58 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d57 s3)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] line = (d58 s3.next)
[Aut::buildVmtNode] root = d58
[Aut::buildVmtNode] d58 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d73 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d73" , "(or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d69 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d69
[Aut::buildVmtNode] line = (d70 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d70
[Aut::buildVmtNode] line = (d71 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d71
[Aut::buildVmtNode] line = (d72 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d72
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d74 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d67 s3)))"
[Aut::parse] tokenList = [ "d74" , "(and (not s4) (d67 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d67 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d67 s3)
[Aut::buildVmtNode] root = d67
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d75 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d49 s0 s1 s2) (d68 s3 s4)))"
[Aut::parse] tokenList = [ "d75" , "(and (d49 s0 s1 s2) (d68 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d49 s0 s1 s2) (d68 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d49 s0 s1 s2)
[Aut::buildVmtNode] root = d49
[Aut::buildVmtNode] line = (d68 s3 s4)
[Aut::buildVmtNode] root = d68
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d76 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))))"
[Aut::parse] tokenList = [ "d76" , "(or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d53 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d53
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d77 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))))"
[Aut::parse] tokenList = [ "d77" , "(or (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d73 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d73
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d78 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d78" , "(and (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d76 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d76
[Aut::buildVmtNode] line = (d77 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d77
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d79 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d54 s0 s1 s2) (d74 s3 s4)))"
[Aut::parse] tokenList = [ "d79" , "(and (d54 s0 s1 s2) (d74 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d54 s0 s1 s2) (d74 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d54 s0 s1 s2)
[Aut::buildVmtNode] root = d54
[Aut::buildVmtNode] line = (d74 s3 s4)
[Aut::buildVmtNode] root = d74
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d80 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) s6 (not s7)))"
[Aut::parse] tokenList = [ "d80" , "(and (not s5) s6 (not s7))" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) s6 (not s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d81 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d81" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d82 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next))"
[Aut::parse] tokenList = [ "d82" , "(and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d83 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d83" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d84 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d84" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d85 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d85" , "(and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d86 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d86" , "(or (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (or (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d81 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d81
[Aut::buildVmtNode] line = (d82 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d82
[Aut::buildVmtNode] line = (d83 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d83
[Aut::buildVmtNode] line = (d84 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d84
[Aut::buildVmtNode] line = (d85 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d85
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d87 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) (not s6) s7))"
[Aut::parse] tokenList = [ "d87" , "(and (not s5) (not s6) s7)" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) (not s6) s7)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d88 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d75 s0 s1 s2 s3 s4) (d80 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d88" , "(and (not s8) (d75 s0 s1 s2 s3 s4) (d80 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d75 s0 s1 s2 s3 s4) (d80 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d75 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d75
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d89 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d89" , "(and (not s2) (not s2.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (d78 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d90 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d90" , "(and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d91 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d91" , "(and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d86 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d86
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d92 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d80 s5.next s6.next s7.next) (d87 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d92" , "(and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d80 s5.next s6.next s7.next) (d87 s5 s6 s7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d80 s5.next s6.next s7.next) (d87 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d78 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] d78 PARAM
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::buildVmtNode] line = (d87 s5 s6 s7)
[Aut::buildVmtNode] root = d87
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d93 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y24 Bool) (y25 Bool) (y26 Bool) (y27 Bool) (y28 Bool) (y29 Bool) (y30 Bool) (y31 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d93" , "(and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y24" , "y25" , "y26" , "y27" , "y28" , "y29" , "y30" , "y31" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d78 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] d78 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d94 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d94" , "(and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d80 s5 s6 s7) (d80 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d78 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d78
[Aut::buildVmtNode] d78 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] line = (d80 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d80
[Aut::buildVmtNode] d80 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d95 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y24 Bool) (y25 Bool) (y26 Bool) (y27 Bool) (y28 Bool) (y29 Bool) (y30 Bool) (y31 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (or (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d93 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)))"
[Aut::parse] tokenList = [ "d95" , "(or (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d93 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y24" , "y25" , "y26" , "y27" , "y28" , "y29" , "y30" , "y31" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d93 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d89 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d89
[Aut::buildVmtNode] line = (d90 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d90
[Aut::buildVmtNode] line = (d91 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d91
[Aut::buildVmtNode] line = (d92 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d92
[Aut::buildVmtNode] line = (d93 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d93
[Aut::buildVmtNode] line = (d94 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d94
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d96 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d79 s0 s1 s2 s3 s4) (d80 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d96" , "(and (not s8) (d79 s0 s1 s2 s3 s4) (d80 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d79 s0 s1 s2 s3 s4) (d80 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d79 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d79
[Aut::buildVmtNode] line = (d80 s5 s6 s7)
[Aut::buildVmtNode] root = d80
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d97 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool)) Bool (and (not s9) (d0 s0 s1 s2 s3 s4)))"
[Aut::parse] tokenList = [ "d97" , "(and (not s9) (d0 s0 s1 s2 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s9" ]
[Aut::buildVmtNode] line = (and (not s9) (d0 s0 s1 s2 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (d0 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d98 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s9.next Bool) (n0.next Int)) Bool (and (not s9) (not s9.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d98" , "(and (not s9) (not s9.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s9) (not s9.next) (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (not s9.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = (d19 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s0.next s1.next s2.next s3.next s4.next)
[Aut::buildVmtNode] root = d19
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d99 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y24 Bool) (y25 Bool) (y26 Bool) (y27 Bool) (y28 Bool) (y29 Bool) (y30 Bool) (y31 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (and s9 s9.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)))"
[Aut::parse] tokenList = [ "d99" , "(and s9 s9.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y24" , "y25" , "y26" , "y27" , "y28" , "y29" , "y30" , "y31" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s9 s9.next (d95 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = (d95 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d95
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d100 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d20 s0 s1 s2 s3 s4) (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d100" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d20 s0 s1 s2 s3 s4) (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s9) s9.next (d20 s0 s1 s2 s3 s4) (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (not s9)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = s9.next
[Aut::buildVmtNode] line = (d20 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d20
[Aut::buildVmtNode] line = (d88 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next)
[Aut::buildVmtNode] root = d88
[Aut::buildVmtNode] d88 PARAM
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d101 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y24 Bool) (y25 Bool) (y26 Bool) (y27 Bool) (y28 Bool) (y29 Bool) (y30 Bool) (y31 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (n0.next Int)) Bool (or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)))"
[Aut::parse] tokenList = [ "d101" , "(or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y24" , "y25" , "y26" , "y27" , "y28" , "y29" , "y30" , "y31" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next) (d99 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next) (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d98 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s9.next n0.next)
[Aut::buildVmtNode] root = d98
[Aut::buildVmtNode] line = (d99 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)
[Aut::buildVmtNode] root = d99
[Aut::buildVmtNode] line = (d100 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)
[Aut::buildVmtNode] root = d100
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d102 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool)) Bool (and s9 (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8)))"
[Aut::parse] tokenList = [ "d102" , "(and s9 (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" ]
[Aut::buildVmtNode] line = (and s9 (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s9
[Aut::buildVmtNode] line = (d96 s0 s1 s2 s3 s4 s5 s6 s7 s8)
[Aut::buildVmtNode] root = d96
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d103 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (not s0) s1 (not s2) s3))"
[Aut::parse] tokenList = [ "d103" , "(and (not s0) s1 (not s2) s3)" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" ]
[Aut::buildVmtNode] line = (and (not s0) s1 (not s2) s3)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d104 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 (not s0) s1 s2 s3 (not s0.next) s1.next s2.next (not s3.next)))"
[Aut::parse] tokenList = [ "d104" , "(and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 (not s0) s1 s2 s3 (not s0.next) s1.next s2.next (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 (not x5) (not x6) x7 (not s0) s1 s2 s3 (not s0.next) s1.next s2.next (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d105 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) s1 (not s2) s3 s0.next (not s1.next) (not s2.next) s3.next))"
[Aut::parse] tokenList = [ "d105" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) s1 (not s2) s3 s0.next (not s1.next) (not s2.next) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 (not s0) s1 (not s2) s3 s0.next (not s1.next) (not s2.next) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d106 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s0 (not s1) (not s2) s3 (not s0.next) (not s1.next) (not s2.next) (not s3.next)))"
[Aut::parse] tokenList = [ "d106" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s0 (not s1) (not s2) s3 (not s0.next) (not s1.next) (not s2.next) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) (not x6) (not x7) s0 (not s1) (not s2) s3 (not s0.next) (not s1.next) (not s2.next) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d107 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s0.next (not s1.next) (not s2.next) (not s3.next)))"
[Aut::parse] tokenList = [ "d107" , "(and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s0.next (not s1.next) (not s2.next) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 x5 (not x6) x7 (not s0) s1 (not s2) (not s3) s0.next (not s1.next) (not s2.next) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d108 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 s0 (not s1) (not s2) (not s3) (not s0.next) (not s1.next) s2.next s3.next))"
[Aut::parse] tokenList = [ "d108" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 s0 (not s1) (not s2) (not s3) (not s0.next) (not s1.next) s2.next s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 x7 s0 (not s1) (not s2) (not s3) (not s0.next) (not s1.next) s2.next s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d109 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s0.next) (not s1.next) (not s2.next) s3.next))"
[Aut::parse] tokenList = [ "d109" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s0.next) (not s1.next) (not s2.next) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) s1 s2 (not s3) (not s0.next) (not s1.next) (not s2.next) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d110 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s0.next) s1.next s2.next s3.next))"
[Aut::parse] tokenList = [ "d110" , "(and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s0.next) s1.next s2.next s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 x3 (not x4) x5 (not x6) (not x7) (not s0) (not s1) (not s2) (not s3) (not s0.next) s1.next s2.next s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d111 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) s2 (not s3) (not s0.next) s1.next (not s2.next) (not s3.next)))"
[Aut::parse] tokenList = [ "d111" , "(and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) s2 (not s3) (not s0.next) s1.next (not s2.next) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) (not x4) x5 (not x6) x7 (not s0) (not s1) s2 (not s3) (not s0.next) s1.next (not s2.next) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d112 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) s3 (not s0.next) (not s1.next) s2.next (not s3.next)))"
[Aut::parse] tokenList = [ "d112" , "(and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) s3 (not s0.next) (not s1.next) s2.next (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x2 (not x3) x4 x5 (not x6) (not x7) (not s0) (not s1) (not s2) s3 (not s0.next) (not s1.next) s2.next (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d113 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool)) Bool (or (d104 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d105 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d106 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d107 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d108 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d109 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d110 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d111 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d112 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)))"
[Aut::parse] tokenList = [ "d113" , "(or (d104 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d105 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d106 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d107 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d108 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d109 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d110 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d111 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d112 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s0.next" , "s1.next" , "s2.next" , "s3.next" ]
[Aut::buildVmtNode] line = (or (d104 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d105 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d106 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d107 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d108 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d109 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d110 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d111 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (d112 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d104 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d104
[Aut::buildVmtNode] line = (d105 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d105
[Aut::buildVmtNode] line = (d106 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d106
[Aut::buildVmtNode] line = (d107 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d107
[Aut::buildVmtNode] line = (d108 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d108
[Aut::buildVmtNode] line = (d109 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d109
[Aut::buildVmtNode] line = (d110 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d110
[Aut::buildVmtNode] line = (d111 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d111
[Aut::buildVmtNode] line = (d112 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d112
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d114 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool)) Bool (and (not s0) (not s1) s2 s3))"
[Aut::parse] tokenList = [ "d114" , "(and (not s0) (not s1) s2 s3)" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" ]
[Aut::buildVmtNode] line = (and (not s0) (not s1) s2 s3)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d115 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s9 Bool) (s10 Bool)) Bool (and (not s10) (d97 s0 s1 s2 s3 s4 s9)))"
[Aut::parse] tokenList = [ "d115" , "(and (not s10) (d97 s0 s1 s2 s3 s4 s9))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s9" , "s10" ]
[Aut::buildVmtNode] line = (and (not s10) (d97 s0 s1 s2 s3 s4 s9))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s10)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = (d97 s0 s1 s2 s3 s4 s9)
[Aut::buildVmtNode] root = d97
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d116 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y24 Bool) (y25 Bool) (y26 Bool) (y27 Bool) (y28 Bool) (y29 Bool) (y30 Bool) (y31 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int)) Bool (and (not s10) (not s10.next) (d101 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)))"
[Aut::parse] tokenList = [ "d116" , "(and (not s10) (not s10.next) (d101 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y24" , "y25" , "y26" , "y27" , "y28" , "y29" , "y30" , "y31" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "s10" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "s10.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s10) (not s10.next) (d101 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s10)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = (not s10.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10.next
[Aut::buildVmtNode] line = (d101 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next n0.next)
[Aut::buildVmtNode] root = d101
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d117 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s10 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s10.next Bool) (n0.next Int)) Bool (and s10 s10.next (d113 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d117" , "(and s10 s10.next (d113 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s10" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s10.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s10 s10.next (d113 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = s10.next
[Aut::buildVmtNode] line = (d113 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d113
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d118 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s10.next Bool) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s10) s10.next (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9) (d103 s0.next s1.next s2.next s3.next) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d118" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s10) s10.next (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9) (d103 s0.next s1.next s2.next s3.next) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "s10" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s10.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (not s10) s10.next (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9) (d103 s0.next s1.next s2.next s3.next) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (not s10)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = s10.next
[Aut::buildVmtNode] line = (d102 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9)
[Aut::buildVmtNode] root = d102
[Aut::buildVmtNode] line = (d103 s0.next s1.next s2.next s3.next)
[Aut::buildVmtNode] root = d103
[Aut::buildVmtNode] d103 PARAM
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d119 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y24 Bool) (y25 Bool) (y26 Bool) (y27 Bool) (y28 Bool) (y29 Bool) (y30 Bool) (y31 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (s9 Bool) (s10 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (s9.next Bool) (s10.next Bool) (n0.next Int)) Bool (or (d116 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next) (d117 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next) (d118 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next)))"
[Aut::parse] tokenList = [ "d119" , "(or (d116 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next) (d117 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next) (d118 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y24" , "y25" , "y26" , "y27" , "y28" , "y29" , "y30" , "y31" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "s9" , "s10" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "s9.next" , "s10.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d116 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next) (d117 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next) (d118 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d116 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next)
[Aut::buildVmtNode] root = d116
[Aut::buildVmtNode] line = (d117 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next)
[Aut::buildVmtNode] root = d117
[Aut::buildVmtNode] line = (d118 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s10.next n0.next)
[Aut::buildVmtNode] root = d118
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d120 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s10 Bool)) Bool (and s10 (d114 s0 s1 s2 s3)))"
[Aut::parse] tokenList = [ "d120" , "(and s10 (d114 s0 s1 s2 s3))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s10" ]
[Aut::buildVmtNode] line = (and s10 (d114 s0 s1 s2 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s10
[Aut::buildVmtNode] line = (d114 s0 s1 s2 s3)
[Aut::buildVmtNode] root = d114
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d115 s0 s1 s2 s3 s4 s9 s10) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d115 s0 s1 s2 s3 s4 s9 s10) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d115 s0 s1 s2 s3 s4 s9 s10) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d115 s0 s1 s2 s3 s4 s9 s10)
[Aut::buildVmtNode] root = d115
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d119 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d119 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d119 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d119 x0 x1 x2 x3 x4 x5 x6 x7 y24 y25 y26 y27 y28 y29 y30 y31 s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next s9.next s10.next n0.next)
[Aut::buildVmtNode] root = d119
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d120 s0 s1 s2 s3 s10)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d120 s0 s1 s2 s3 s10)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d120 s0 s1 s2 s3 s10)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d120 s0 s1 s2 s3 s10))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d120 s0 s1 s2 s3 s10)
[Aut::buildVmtNode] root = d120
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=89
[Aut::buildParam] ++gflag=90
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0 () Bool)"
[Aut::parse] tokenList = [ "x0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x0.next () Bool)"
[Aut::parse] tokenList = [ "x0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1 () Bool)"
[Aut::parse] tokenList = [ "x1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x1.next () Bool)"
[Aut::parse] tokenList = [ "x1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2 () Bool)"
[Aut::parse] tokenList = [ "x2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x2.next () Bool)"
[Aut::parse] tokenList = [ "x2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3 () Bool)"
[Aut::parse] tokenList = [ "x3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x3.next () Bool)"
[Aut::parse] tokenList = [ "x3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4 () Bool)"
[Aut::parse] tokenList = [ "x4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x4.next () Bool)"
[Aut::parse] tokenList = [ "x4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5 () Bool)"
[Aut::parse] tokenList = [ "x5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x5.next () Bool)"
[Aut::parse] tokenList = [ "x5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6 () Bool)"
[Aut::parse] tokenList = [ "x6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x6.next () Bool)"
[Aut::parse] tokenList = [ "x6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7 () Bool)"
[Aut::parse] tokenList = [ "x7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun x7.next () Bool)"
[Aut::parse] tokenList = [ "x7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y16 () Bool)"
[Aut::parse] tokenList = [ "y16" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y16.next () Bool)"
[Aut::parse] tokenList = [ "y16.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y17 () Bool)"
[Aut::parse] tokenList = [ "y17" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y17.next () Bool)"
[Aut::parse] tokenList = [ "y17.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y18 () Bool)"
[Aut::parse] tokenList = [ "y18" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y18.next () Bool)"
[Aut::parse] tokenList = [ "y18.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y19 () Bool)"
[Aut::parse] tokenList = [ "y19" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y19.next () Bool)"
[Aut::parse] tokenList = [ "y19.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y20 () Bool)"
[Aut::parse] tokenList = [ "y20" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y20.next () Bool)"
[Aut::parse] tokenList = [ "y20.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y21 () Bool)"
[Aut::parse] tokenList = [ "y21" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y21.next () Bool)"
[Aut::parse] tokenList = [ "y21.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y22 () Bool)"
[Aut::parse] tokenList = [ "y22" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y22.next () Bool)"
[Aut::parse] tokenList = [ "y22.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y23 () Bool)"
[Aut::parse] tokenList = [ "y23" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun y23.next () Bool)"
[Aut::parse] tokenList = [ "y23.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0 () Bool)"
[Aut::parse] tokenList = [ "s0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s0.next () Bool)"
[Aut::parse] tokenList = [ "s0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1 () Bool)"
[Aut::parse] tokenList = [ "s1" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s1.next () Bool)"
[Aut::parse] tokenList = [ "s1.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2 () Bool)"
[Aut::parse] tokenList = [ "s2" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s2.next () Bool)"
[Aut::parse] tokenList = [ "s2.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3 () Bool)"
[Aut::parse] tokenList = [ "s3" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s3.next () Bool)"
[Aut::parse] tokenList = [ "s3.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4 () Bool)"
[Aut::parse] tokenList = [ "s4" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s4.next () Bool)"
[Aut::parse] tokenList = [ "s4.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5 () Bool)"
[Aut::parse] tokenList = [ "s5" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s5.next () Bool)"
[Aut::parse] tokenList = [ "s5.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6 () Bool)"
[Aut::parse] tokenList = [ "s6" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s6.next () Bool)"
[Aut::parse] tokenList = [ "s6.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7 () Bool)"
[Aut::parse] tokenList = [ "s7" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s7.next () Bool)"
[Aut::parse] tokenList = [ "s7.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8 () Bool)"
[Aut::parse] tokenList = [ "s8" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun s8.next () Bool)"
[Aut::parse] tokenList = [ "s8.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0 () Int)"
[Aut::parse] tokenList = [ "n0" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 0
[Aut::parse] line = "(declare-fun n0.next () Int)"
[Aut::parse] tokenList = [ "n0.next" , "" ]
[Aut::parse] paramList = [ ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun epsilon ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7)))"
[Aut::parse] tokenList = [ "epsilon" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun leftAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7))"
[Aut::parse] tokenList = [ "leftAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) (not x6) x7)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun rightAngle ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool)) Bool (and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7)))"
[Aut::parse] tokenList = [ "rightAngle" , "(and x0 (not x1) (not x2) (not x3) (not x4) (not x5) x6 (not x7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" ]
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d0 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d0" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d1 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d1" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d2 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d2" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d3 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d3" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d4 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d4" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d5 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d5" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d6 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d6" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d7 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d7" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d8 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d8" , "(or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d1 x0 x1 x3 x5 x7 s0 s0.next) (d2 x0 x1 x5 x6 x7 s0 s0.next) (d3 x0 x1 x4 x5 s0 s0.next) (d4 x0 x1 x3 x4 s0 s0.next) (d5 x0 x1 x4 x6 s0 s0.next) (d6 x0 x2 x3 x5 x6 s0 s0.next) (d7 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d1 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d1
[Aut::buildVmtNode] line = (d2 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d2
[Aut::buildVmtNode] line = (d3 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d3
[Aut::buildVmtNode] line = (d4 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d4
[Aut::buildVmtNode] line = (d5 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d5
[Aut::buildVmtNode] line = (d6 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d6
[Aut::buildVmtNode] line = (d7 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d9 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d9" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d10 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d10" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d11 ((x0 Bool) (x1 Bool) (x3 Bool) (x5 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d11" , "(and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x5" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 x3 (not x5) (not x7) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d12 ((x0 Bool) (x1 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d12" , "(and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x5) (not x6) x7 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d13 ((x0 Bool) (x1 Bool) (x4 Bool) (x5 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x5 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d13" , "(and (not x0) x1 (not x4) x5 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x5" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x5 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d14 ((x0 Bool) (x1 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x3) x4 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d14" , "(and (not x0) x1 (not x3) x4 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x3) x4 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d15 ((x0 Bool) (x1 Bool) (x4 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x1 (not x4) x6 (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d15" , "(and (not x0) x1 (not x4) x6 (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x4" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x4) x6 (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d16 ((x0 Bool) (x2 Bool) (x3 Bool) (x5 Bool) (x6 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d16" , "(and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x5" , "x6" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x5) (not x6) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d17 ((x0 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (s0 Bool) (s0.next Bool)) Bool (and (not x0) x2 x3 (not x4) (not s0) (not s0.next)))"
[Aut::parse] tokenList = [ "d17" , "(and (not x0) x2 x3 (not x4) (not s0) (not s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "x3" , "x4" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 x3 (not x4) (not s0) (not s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (not s0.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d18 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s0.next Bool)) Bool (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next)))"
[Aut::parse] tokenList = [ "d18" , "(or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s0.next" ]
[Aut::buildVmtNode] line = (or (d11 x0 x1 x3 x5 x7 s0 s0.next) (d12 x0 x1 x5 x6 x7 s0 s0.next) (d13 x0 x1 x4 x5 s0 s0.next) (d14 x0 x1 x3 x4 s0 s0.next) (d15 x0 x1 x4 x6 s0 s0.next) (d16 x0 x2 x3 x5 x6 s0 s0.next) (d17 x0 x2 x3 x4 s0 s0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d11 x0 x1 x3 x5 x7 s0 s0.next)
[Aut::buildVmtNode] root = d11
[Aut::buildVmtNode] line = (d12 x0 x1 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d12
[Aut::buildVmtNode] line = (d13 x0 x1 x4 x5 s0 s0.next)
[Aut::buildVmtNode] root = d13
[Aut::buildVmtNode] line = (d14 x0 x1 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d14
[Aut::buildVmtNode] line = (d15 x0 x1 x4 x6 s0 s0.next)
[Aut::buildVmtNode] root = d15
[Aut::buildVmtNode] line = (d16 x0 x2 x3 x5 x6 s0 s0.next)
[Aut::buildVmtNode] root = d16
[Aut::buildVmtNode] line = (d17 x0 x2 x3 x4 s0 s0.next)
[Aut::buildVmtNode] root = d17
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d19 ((s0 Bool)) Bool (not s0))"
[Aut::parse] tokenList = [ "d19" , "(not s0)" ]
[Aut::parse] paramList = [ "s0" ]
[Aut::buildVmtNode] line = (not s0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d20 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d0 s0)) (and s1 (d10 s0))))"
[Aut::parse] tokenList = [ "d20" , "(or (and (not s1) (d0 s0)) (and s1 (d10 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d0 s0)) (and s1 (d10 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d0 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d0 s0)
[Aut::buildVmtNode] root = d0
[Aut::buildVmtNode] line = (and s1 (d10 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d10 s0)
[Aut::buildVmtNode] root = d10
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d21 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d21" , "(and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and (not s1) (not s1.next) (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (not s1.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d8 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d8
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d22 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)))"
[Aut::parse] tokenList = [ "d22" , "(and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (and s1 s1.next (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = (d18 x0 x1 x2 x3 x4 x5 x6 x7 s0 s0.next)
[Aut::buildVmtNode] root = d18
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d23 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s0.next Bool) (s1.next Bool)) Bool (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)))"
[Aut::parse] tokenList = [ "d23" , "(or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s0.next" , "s1.next" ]
[Aut::buildVmtNode] line = (or (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d21 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d21
[Aut::buildVmtNode] line = (d22 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d22
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d24 ((s0 Bool) (s1 Bool)) Bool (or (and (not s1) (d9 s0)) (and s1 (d19 s0))))"
[Aut::parse] tokenList = [ "d24" , "(or (and (not s1) (d9 s0)) (and s1 (d19 s0)))" ]
[Aut::parse] paramList = [ "s0" , "s1" ]
[Aut::buildVmtNode] line = (or (and (not s1) (d9 s0)) (and s1 (d19 s0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s1) (d9 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d9 s0)
[Aut::buildVmtNode] root = d9
[Aut::buildVmtNode] line = (and s1 (d19 s0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (d19 s0)
[Aut::buildVmtNode] root = d19
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d25 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1))))"
[Aut::parse] tokenList = [ "d25" , "(and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7)) (= n0.next (+ n0 1)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not (epsilon x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next (+ n0 1))
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = (+ n0 1)
[Aut::buildVmtNode] root = +
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = 1
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d26 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (n0 Int) (n0.next Int)) Bool (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0)))"
[Aut::parse] tokenList = [ "d26" , "(and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "n0" , "n0.next" ]
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d27 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (n0.next Int)) Bool (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))))"
[Aut::parse] tokenList = [ "d27" , "(and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "n0" , "s0.next" , "s1.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next) (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d23 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s0.next s1.next)
[Aut::buildVmtNode] root = d23
[Aut::buildVmtNode] line = (or (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next) (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d25 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d25
[Aut::buildVmtNode] line = (d26 x0 x1 x2 x3 x4 x5 x6 x7 n0 n0.next)
[Aut::buildVmtNode] root = d26
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d28 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d20 s0 s1)))"
[Aut::parse] tokenList = [ "d28" , "(and (not s2) (d20 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d20 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d20 s0 s1)
[Aut::buildVmtNode] root = d20
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d29 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)))"
[Aut::parse] tokenList = [ "d29" , "(and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s2.next s2) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d27 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 n0 s0.next s1.next n0.next)
[Aut::buildVmtNode] root = d27
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d30 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s2 Bool) (s2.next Bool)) Bool (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))))"
[Aut::parse] tokenList = [ "d30" , "(or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s2" , "s2.next" ]
[Aut::buildVmtNode] line = (or (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (and (not s2) s2.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (and s2 (not s2.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d31 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)))"
[Aut::parse] tokenList = [ "d31" , "(and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (= s0.next s0) (= s1.next s1) (= n0.next n0) (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (d30 x0 x1 x2 x3 x4 x5 x6 x7 s2 s2.next)
[Aut::buildVmtNode] root = d30
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d32 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)))"
[Aut::parse] tokenList = [ "d32" , "(or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d29 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d29
[Aut::buildVmtNode] line = (d31 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d31
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d33 ((s0 Bool) (s1 Bool) (s2 Bool)) Bool (and (not s2) (d24 s0 s1)))"
[Aut::parse] tokenList = [ "d33" , "(and (not s2) (d24 s0 s1))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" ]
[Aut::buildVmtNode] line = (and (not s2) (d24 s0 s1))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (d24 s0 s1)
[Aut::buildVmtNode] root = d24
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d34 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d34" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d35 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next))"
[Aut::parse] tokenList = [ "d35" , "(and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x1 (not x2) (not x3) (not x4) (not x5) (not x6) (not x7) (not s3) s3.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not x2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d36 ((s3 Bool)) Bool s3)"
[Aut::parse] tokenList = [ "d36" , "s3" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d37 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d37" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d38 ((x0 Bool) (x2 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x2 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d38" , "(and (not x0) x2 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x2" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x2 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d39 ((x0 Bool) (x3 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x3 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d39" , "(and (not x0) x3 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x3" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x3 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d40 ((x0 Bool) (x4 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x4 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d40" , "(and (not x0) x4 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x4" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x4 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d41 ((x0 Bool) (x5 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x5 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d41" , "(and (not x0) x5 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x5" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x5 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d42 ((x0 Bool) (x6 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x6 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d42" , "(and (not x0) x6 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x6" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x6 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d43 ((x0 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) x7 (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d43" , "(and (not x0) x7 (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) x7 (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d44 ((x0 Bool) (x1 Bool) (s3 Bool) (s3.next Bool)) Bool (and (not x0) (not x1) (not s3) (not s3.next)))"
[Aut::parse] tokenList = [ "d44" , "(and (not x0) (not x1) (not s3) (not s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) (not s3) (not s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (not s3.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d45 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s3.next Bool)) Bool (or (d38 x0 x2 s3 s3.next) (d39 x0 x3 s3 s3.next) (d40 x0 x4 s3 s3.next) (d41 x0 x5 s3 s3.next) (d42 x0 x6 s3 s3.next) (d43 x0 x7 s3 s3.next) (d44 x0 x1 s3 s3.next)))"
[Aut::parse] tokenList = [ "d45" , "(or (d38 x0 x2 s3 s3.next) (d39 x0 x3 s3 s3.next) (d40 x0 x4 s3 s3.next) (d41 x0 x5 s3 s3.next) (d42 x0 x6 s3 s3.next) (d43 x0 x7 s3 s3.next) (d44 x0 x1 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s3.next" ]
[Aut::buildVmtNode] line = (or (d38 x0 x2 s3 s3.next) (d39 x0 x3 s3 s3.next) (d40 x0 x4 s3 s3.next) (d41 x0 x5 s3 s3.next) (d42 x0 x6 s3 s3.next) (d43 x0 x7 s3 s3.next) (d44 x0 x1 s3 s3.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d38 x0 x2 s3 s3.next)
[Aut::buildVmtNode] root = d38
[Aut::buildVmtNode] line = (d39 x0 x3 s3 s3.next)
[Aut::buildVmtNode] root = d39
[Aut::buildVmtNode] line = (d40 x0 x4 s3 s3.next)
[Aut::buildVmtNode] root = d40
[Aut::buildVmtNode] line = (d41 x0 x5 s3 s3.next)
[Aut::buildVmtNode] root = d41
[Aut::buildVmtNode] line = (d42 x0 x6 s3 s3.next)
[Aut::buildVmtNode] root = d42
[Aut::buildVmtNode] line = (d43 x0 x7 s3 s3.next)
[Aut::buildVmtNode] root = d43
[Aut::buildVmtNode] line = (d44 x0 x1 s3 s3.next)
[Aut::buildVmtNode] root = d44
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d46 ((s3 Bool)) Bool (not s3))"
[Aut::parse] tokenList = [ "d46" , "(not s3)" ]
[Aut::parse] paramList = [ "s3" ]
[Aut::buildVmtNode] line = (not s3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s3
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d47 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d37 s3)))"
[Aut::parse] tokenList = [ "d47" , "(and (not s4) (d37 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d37 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d37 s3)
[Aut::buildVmtNode] root = d37
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d48 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d48" , "(and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) (not s4.next) (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d45 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d45
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d49 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)))"
[Aut::parse] tokenList = [ "d49" , "(and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 s4.next (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)) (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)) (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (not (leftAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (not (rightAngle x0 x1 x2 x3 x4 x5 x6 x7))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d35 x0 x1 x2 x3 x4 x5 x6 x7 s3 s3.next)
[Aut::buildVmtNode] root = d35
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d50 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d46 s3) (d34 s3.next)))"
[Aut::parse] tokenList = [ "d50" , "(and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d46 s3) (d34 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and (not s4) s4.next (leftAngle x0 x1 x2 x3 x4 x5 x6 x7) (d46 s3) (d34 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (leftAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = leftAngle
[Aut::buildVmtNode] line = (d46 s3)
[Aut::buildVmtNode] root = d46
[Aut::buildVmtNode] line = (d34 s3.next)
[Aut::buildVmtNode] root = d34
[Aut::buildVmtNode] d34 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d51 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d36 s3) (d37 s3.next)))"
[Aut::parse] tokenList = [ "d51" , "(and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d36 s3) (d37 s3.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (and s4 (not s4.next) (rightAngle x0 x1 x2 x3 x4 x5 x6 x7) (d36 s3) (d37 s3.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (not s4.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = (rightAngle x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = rightAngle
[Aut::buildVmtNode] line = (d36 s3)
[Aut::buildVmtNode] root = d36
[Aut::buildVmtNode] line = (d37 s3.next)
[Aut::buildVmtNode] root = d37
[Aut::buildVmtNode] d37 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d52 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d52" , "(or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d48 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d48
[Aut::buildVmtNode] line = (d49 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d49
[Aut::buildVmtNode] line = (d50 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d50
[Aut::buildVmtNode] line = (d51 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d51
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d53 ((s3 Bool) (s4 Bool)) Bool (and (not s4) (d46 s3)))"
[Aut::parse] tokenList = [ "d53" , "(and (not s4) (d46 s3))" ]
[Aut::parse] paramList = [ "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (not s4) (d46 s3))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (d46 s3)
[Aut::buildVmtNode] root = d46
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d54 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d28 s0 s1 s2) (d47 s3 s4)))"
[Aut::parse] tokenList = [ "d54" , "(and (d28 s0 s1 s2) (d47 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d28 s0 s1 s2) (d47 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d28 s0 s1 s2)
[Aut::buildVmtNode] root = d28
[Aut::buildVmtNode] line = (d47 s3 s4)
[Aut::buildVmtNode] root = d47
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d55 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (n0.next Int)) Bool (or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))))"
[Aut::parse] tokenList = [ "d55" , "(or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "n0" , "s0.next" , "s1.next" , "s2.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d32 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d32
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= n0.next n0))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d56 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s3 Bool) (s4 Bool) (s3.next Bool) (s4.next Bool)) Bool (or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))))"
[Aut::parse] tokenList = [ "d56" , "(or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s3" , "s4" , "s3.next" , "s4.next" ]
[Aut::buildVmtNode] line = (or (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next) (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4)))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d52 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d52
[Aut::buildVmtNode] line = (and (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s3.next s3) (= s4.next s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d57 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (n0.next Int)) Bool (and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)))"
[Aut::parse] tokenList = [ "d57" , "(and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next) (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d55 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 n0 s0.next s1.next s2.next n0.next)
[Aut::buildVmtNode] root = d55
[Aut::buildVmtNode] line = (d56 x0 x1 x2 x3 x4 x5 x6 x7 s3 s4 s3.next s4.next)
[Aut::buildVmtNode] root = d56
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d58 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool)) Bool (and (d33 s0 s1 s2) (d53 s3 s4)))"
[Aut::parse] tokenList = [ "d58" , "(and (d33 s0 s1 s2) (d53 s3 s4))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" ]
[Aut::buildVmtNode] line = (and (d33 s0 s1 s2) (d53 s3 s4))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (d33 s0 s1 s2)
[Aut::buildVmtNode] root = d33
[Aut::buildVmtNode] line = (d53 s3 s4)
[Aut::buildVmtNode] root = d53
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d59 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) s6 (not s7)))"
[Aut::parse] tokenList = [ "d59" , "(and (not s5) s6 (not s7))" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) s6 (not s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d60 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d60" , "(and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 x4 (not x5) x6 x7 (not s5) s6 s7 (not s5.next) (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d61 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next))"
[Aut::parse] tokenList = [ "d61" , "(and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 (not x6) (not x7) s5 (not s6) (not s7) (not s5.next) s6.next s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = (not x6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d62 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d62" , "(and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) (not x5) x6 x7 s5 (not s6) s7 (not s5.next) (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = (not x5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = (not s5.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d63 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next))"
[Aut::parse] tokenList = [ "d63" , "(and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 (not x3) (not x4) x5 x6 (not x7) (not s5) s6 (not s7) s5.next (not s6.next) s7.next)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = (not x3)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d64 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next)))"
[Aut::parse] tokenList = [ "d64" , "(and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (and (not x0) (not x1) x2 x3 (not x4) x5 x6 (not x7) (not s5) (not s6) (not s7) s5.next (not s6.next) (not s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not x0)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x0
[Aut::buildVmtNode] line = (not x1)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x1
[Aut::buildVmtNode] line = x2
[Aut::buildVmtNode] line = x3
[Aut::buildVmtNode] line = (not x4)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x4
[Aut::buildVmtNode] line = x5
[Aut::buildVmtNode] line = x6
[Aut::buildVmtNode] line = (not x7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = x7
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = (not s7)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7
[Aut::buildVmtNode] line = s5.next
[Aut::buildVmtNode] line = (not s6.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6.next
[Aut::buildVmtNode] line = (not s7.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s7.next
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d65 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool)) Bool (or (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d65" , "(or (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s5" , "s6" , "s7" , "s5.next" , "s6.next" , "s7.next" ]
[Aut::buildVmtNode] line = (or (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next) (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d60 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d60
[Aut::buildVmtNode] line = (d61 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d61
[Aut::buildVmtNode] line = (d62 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d62
[Aut::buildVmtNode] line = (d63 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d63
[Aut::buildVmtNode] line = (d64 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d64
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d66 ((s5 Bool) (s6 Bool) (s7 Bool)) Bool (and (not s5) (not s6) s7))"
[Aut::parse] tokenList = [ "d66" , "(and (not s5) (not s6) s7)" ]
[Aut::parse] paramList = [ "s5" , "s6" , "s7" ]
[Aut::buildVmtNode] line = (and (not s5) (not s6) s7)
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s5)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s5
[Aut::buildVmtNode] line = (not s6)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s6
[Aut::buildVmtNode] line = s7
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d67 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d54 s0 s1 s2 s3 s4) (d59 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d67" , "(and (not s8) (d54 s0 s1 s2 s3 s4) (d59 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d54 s0 s1 s2 s3 s4) (d59 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d54 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d54
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d68 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d68" , "(and (not s2) (not s2.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (d57 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d69 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d69" , "(and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) (not s8) s8.next (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d70 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d70" , "(and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) (not s2.next) (= s0.next s0) (= s1.next s1) (= s2.next s2) (= s3.next s3) (= s4.next s4) (= n0.next n0) s8 s8.next (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (= s0.next s0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s0.next
[Aut::buildVmtNode] line = s0
[Aut::buildVmtNode] line = (= s1.next s1)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s1.next
[Aut::buildVmtNode] line = s1
[Aut::buildVmtNode] line = (= s2.next s2)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (= s3.next s3)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s3.next
[Aut::buildVmtNode] line = s3
[Aut::buildVmtNode] line = (= s4.next s4)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = s4.next
[Aut::buildVmtNode] line = s4
[Aut::buildVmtNode] line = (= n0.next n0)
[Aut::buildVmtNode] root = =
[Aut::buildVmtNode] line = n0.next
[Aut::buildVmtNode] line = n0
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d65 x0 x1 x2 x3 x4 x5 x6 x7 s5 s6 s7 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d65
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d71 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d59 s5.next s6.next s7.next) (d66 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d71" , "(and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d59 s5.next s6.next s7.next) (d66 s5 s6 s7))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and (not s2) s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) s8 (not s8.next) (d59 s5.next s6.next s7.next) (d66 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s2)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d57 true false false false false false false true s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] d57 PARAM
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::buildVmtNode] line = (d66 s5 s6 s7)
[Aut::buildVmtNode] root = d66
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d72 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y16 Bool) (y17 Bool) (y18 Bool) (y19 Bool) (y20 Bool) (y21 Bool) (y22 Bool) (y23 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d72" , "(and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y16" , "y17" , "y18" , "y19" , "y20" , "y21" , "y22" , "y23" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 s2.next (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d57 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] d57 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d73 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next)))"
[Aut::parse] tokenList = [ "d73" , "(and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (and s2 (not s2.next) (epsilon x0 x1 x2 x3 x4 x5 x6 x7) (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next) (not s8) (not s8.next) (d59 s5 s6 s7) (d59 s5.next s6.next s7.next))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = s2
[Aut::buildVmtNode] line = (not s2.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s2.next
[Aut::buildVmtNode] line = (epsilon x0 x1 x2 x3 x4 x5 x6 x7)
[Aut::buildVmtNode] root = epsilon
[Aut::buildVmtNode] line = (d57 true false false false false false true false s0 s1 s2 s3 s4 n0 s0.next s1.next s2.next s3.next s4.next n0.next)
[Aut::buildVmtNode] root = d57
[Aut::buildVmtNode] d57 PARAM
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (not s8.next)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8.next
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] line = (d59 s5.next s6.next s7.next)
[Aut::buildVmtNode] root = d59
[Aut::buildVmtNode] d59 PARAM
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d74 ((x0 Bool) (x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool) (x5 Bool) (x6 Bool) (x7 Bool) (y16 Bool) (y17 Bool) (y18 Bool) (y19 Bool) (y20 Bool) (y21 Bool) (y22 Bool) (y23 Bool) (s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool) (n0 Int) (s0.next Bool) (s1.next Bool) (s2.next Bool) (s3.next Bool) (s4.next Bool) (s5.next Bool) (s6.next Bool) (s7.next Bool) (s8.next Bool) (n0.next Int)) Bool (or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)))"
[Aut::parse] tokenList = [ "d74" , "(or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))" ]
[Aut::parse] paramList = [ "x0" , "x1" , "x2" , "x3" , "x4" , "x5" , "x6" , "x7" , "y16" , "y17" , "y18" , "y19" , "y20" , "y21" , "y22" , "y23" , "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" , "n0" , "s0.next" , "s1.next" , "s2.next" , "s3.next" , "s4.next" , "s5.next" , "s6.next" , "s7.next" , "s8.next" , "n0.next" ]
[Aut::buildVmtNode] line = (or (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d72 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next))
[Aut::buildVmtNode] root = or
[Aut::buildVmtNode] line = (d68 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d68
[Aut::buildVmtNode] line = (d69 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d69
[Aut::buildVmtNode] line = (d70 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d70
[Aut::buildVmtNode] line = (d71 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d71
[Aut::buildVmtNode] line = (d72 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d72
[Aut::buildVmtNode] line = (d73 x0 x1 x2 x3 x4 x5 x6 x7 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d73
[Aut::parse] sCnt = 2
[Aut::parse] line = "(define-fun d75 ((s0 Bool) (s1 Bool) (s2 Bool) (s3 Bool) (s4 Bool) (s5 Bool) (s6 Bool) (s7 Bool) (s8 Bool)) Bool (and (not s8) (d58 s0 s1 s2 s3 s4) (d59 s5 s6 s7)))"
[Aut::parse] tokenList = [ "d75" , "(and (not s8) (d58 s0 s1 s2 s3 s4) (d59 s5 s6 s7))" ]
[Aut::parse] paramList = [ "s0" , "s1" , "s2" , "s3" , "s4" , "s5" , "s6" , "s7" , "s8" ]
[Aut::buildVmtNode] line = (and (not s8) (d58 s0 s1 s2 s3 s4) (d59 s5 s6 s7))
[Aut::buildVmtNode] root = and
[Aut::buildVmtNode] line = (not s8)
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = s8
[Aut::buildVmtNode] line = (d58 s0 s1 s2 s3 s4)
[Aut::buildVmtNode] root = d58
[Aut::buildVmtNode] line = (d59 s5 s6 s7)
[Aut::buildVmtNode] root = d59
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun I () Bool (! (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8) :init true))"
[Aut::parse] tokenList = [ "I" , "(! (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8) :init true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8) :init true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d67 s0 s1 s2 s3 s4 s5 s6 s7 s8)
[Aut::buildVmtNode] root = d67
[Aut::buildVmtNode] line = :init
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun T () Bool (! (d74 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) :trans true))"
[Aut::parse] tokenList = [ "T" , "(! (d74 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) :trans true)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (d74 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next) :trans true)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (d74 x0 x1 x2 x3 x4 x5 x6 x7 y16 y17 y18 y19 y20 y21 y22 y23 s0 s1 s2 s3 s4 s5 s6 s7 s8 n0 s0.next s1.next s2.next s3.next s4.next s5.next s6.next s7.next s8.next n0.next)
[Aut::buildVmtNode] root = d74
[Aut::buildVmtNode] line = :trans
[Aut::buildVmtNode] line = true
[Aut::parse] sCnt = 4
[Aut::parse] line = "(define-fun O () Bool (! (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0))"
[Aut::parse] tokenList = [ "O" , "(! (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0)" ]
[Aut::parse] paramList = [ ]
[Aut::buildVmtNode] line = (! (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)) :invar-property 0)
[Aut::buildVmtNode] root = !
[Aut::buildVmtNode] line = (not (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8))
[Aut::buildVmtNode] root = not
[Aut::buildVmtNode] line = (d75 s0 s1 s2 s3 s4 s5 s6 s7 s8)
[Aut::buildVmtNode] root = d75
[Aut::buildVmtNode] line = :invar-property
[Aut::buildVmtNode] line = 0
[Aut::clearParam] ++gflag=92
[Aut::buildParam] ++gflag=93
