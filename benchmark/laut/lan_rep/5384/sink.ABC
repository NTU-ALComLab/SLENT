(declare-fun sigmaStar_048 () String)
(declare-fun b_sigmaStar_048 () Bool)
(declare-fun literal_6 () String)
(declare-fun b_literal_6 () Bool)
(declare-fun literal_8 () String)
(declare-fun b_literal_8 () Bool)
(declare-fun sigmaStar_054 () String)
(declare-fun b_sigmaStar_054 () Bool)
(declare-fun literal_11 () String)
(declare-fun b_literal_11 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_5 () String)
(declare-fun b_x_5 () Bool)
(declare-fun x_7 () String)
(declare-fun b_x_7 () Bool)
(declare-fun x_9 () String)
(declare-fun b_x_9 () Bool)
(declare-fun x_10 () String)
(declare-fun b_x_10 () Bool)
(declare-fun x_12 () String)
(declare-fun b_x_12 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)

(assert (and b_literal_6 (= literal_6 "    ")))
(assert (and b_literal_8 (= literal_8 " = '")))
(assert (and b_literal_11 (= literal_11 "';\\n")))
(assert (RegexIn atkPtn (RegexConcat (RegexUnion (Str2Reg "j") (RegexUnion (Str2Reg "|") (Str2Reg "J"))) (RegexConcat (RegexUnion (Str2Reg "a") (RegexUnion (Str2Reg "|") (Str2Reg "A"))) (RegexConcat (RegexUnion (Str2Reg "v") (RegexUnion (Str2Reg "|") (Str2Reg "V"))) (RegexConcat (RegexUnion (Str2Reg "a") (RegexUnion (Str2Reg "|") (Str2Reg "A"))) (RegexConcat (RegexUnion (Str2Reg "s") (RegexUnion (Str2Reg "|") (Str2Reg "S"))) (RegexConcat (RegexUnion (Str2Reg "c") (RegexUnion (Str2Reg "|") (Str2Reg "C"))) (RegexConcat (RegexUnion (Str2Reg "r") (RegexUnion (Str2Reg "|") (Str2Reg "R"))) (RegexConcat (RegexUnion (Str2Reg "i") (RegexUnion (Str2Reg "|") (Str2Reg "I"))) (RegexConcat (RegexUnion (Str2Reg "p") (RegexUnion (Str2Reg "|") (Str2Reg "P"))) (RegexConcat (RegexUnion (Str2Reg "t") (RegexUnion (Str2Reg "|") (Str2Reg "T"))) (Str2Reg ":")))))))))))))
(assert (= atk_sink (Concat atk_sigmaStar_1 (Concat atkPtn atk_sigmaStar_2))))
(assert (= b_x_5 (and (= x_5 (ReplaceAll sigmaStar_048 (RegexConcat re.allchar (RegexConcat (re.+ (Str2Reg "d" )) re.allchar)) "_$1.") ) b_sigmaStar_048) ))
(assert (= b_x_7 (and (= x_7 (Concat literal_6 x_5) ) b_literal_6 b_x_5) ))
(assert (= b_x_9 (and (= x_9 (Concat x_7 literal_8) ) b_x_7 b_literal_8) ))
(assert (= b_x_10 (and (= x_10 (Concat x_9 sigmaStar_054) ) b_x_9 b_sigmaStar_054) ))
(assert (= b_x_12 (and (= x_12 (Concat x_10 literal_11) ) b_x_10 b_literal_11) ))
(assert (and (= sink x_12) (= sink atk_sink) b_x_12))
(assert (< 30 (+ (Length sigmaStar_048) (Length sink)) ) )
(check-sat)
