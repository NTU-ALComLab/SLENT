(declare-fun sigmaStar_safe_48 () String)
(declare-fun b_sigmaStar_safe_48 () Bool)
(declare-fun sigmaStar_safe_49 () String)
(declare-fun b_sigmaStar_safe_49 () Bool)
(declare-fun sigmaStar_050 () String)
(declare-fun b_sigmaStar_050 () Bool)
(declare-fun literal_8 () String)
(declare-fun b_literal_8 () Bool)
(declare-fun literal_10 () String)
(declare-fun b_literal_10 () Bool)
(declare-fun literal_13 () String)
(declare-fun b_literal_13 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_1 () String)
(declare-fun b_x_1 () Bool)
(declare-fun x_2 () String)
(declare-fun b_x_2 () Bool)
(declare-fun x_7 () String)
(declare-fun b_x_7 () Bool)
(declare-fun x_9 () String)
(declare-fun b_x_9 () Bool)
(declare-fun x_11 () String)
(declare-fun b_x_11 () Bool)
(declare-fun x_12 () String)
(declare-fun b_x_12 () Bool)
(declare-fun x_14 () String)
(declare-fun b_x_14 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)
(declare-fun atk_part1 () String)
(declare-fun atk_part2 () String)
(declare-fun atk_part3 () String)
(declare-fun sigmaStar_n0 () String)
(declare-fun b_sigmaStar_n0 () Bool)

(assert (and b_sigmaStar_safe_48 (RegexIn sigmaStar_safe_48 (RegexStar (RegexUnion (re.range "0" "9") (RegexUnion (re.range "a" "z") (re.range "A" "Z")))))))
(assert (and b_sigmaStar_safe_49 (RegexIn sigmaStar_safe_49 (RegexStar (RegexUnion (re.range "0" "9") (RegexUnion (re.range "a" "z") (re.range "A" "Z")))))))
(assert (and b_literal_8 (= literal_8 "    ")))
(assert (and b_literal_10 (= literal_10 " = '")))
(assert (and b_literal_13 (= literal_13 "';\\n")))
(assert (RegexIn atk_part1 (Str2Reg "\\\";")))
(assert (RegexIn atk_part3 (Str2Reg "//")))
(assert (= atkPtn (Concat atk_part1 (Concat atk_part2 atk_part3))))
(assert (= atk_sink (Concat atk_sigmaStar_1 (Concat atkPtn atk_sigmaStar_2))))
(assert (= b_x_1 (or (and (= x_1 sigmaStar_safe_48) b_sigmaStar_safe_48) (and (= x_1 sigmaStar_safe_49) b_sigmaStar_safe_49) ) ))
(assert (= b_x_2 (or (and (= x_2 x_1) b_x_1) (and (= x_2 sigmaStar_050) b_sigmaStar_050) ) ))
(assert (= b_x_7 (and (= x_7 (ReplaceAll x_2 (RegexConcat re.allchar (RegexConcat (re.+ (Str2Reg "d" )) re.allchar)) "_$1.") ) b_x_2) ))
(assert (= b_x_9 (and (= x_9 (Concat literal_8 x_7) ) b_literal_8 b_x_7) ))
(assert (= b_x_11 (and (= x_11 (Concat x_9 literal_10) ) b_x_9 b_literal_10) ))
(assert (= b_x_12 (and (= x_12 (Concat x_11 sigmaStar_n0) ) b_x_11 b_sigmaStar_n0) ))
(assert (= b_x_14 (and (= x_14 (Concat x_12 literal_13) ) b_x_12 b_literal_13) ))
(assert (and (= sink x_14) (= sink atk_sink) b_x_14))
(assert (< 10 (+ (Length x_2) (Length sink)) ) )
(check-sat)
