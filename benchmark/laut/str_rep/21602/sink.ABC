(declare-fun sigmaStar_safe_50 () String)
(declare-fun b_sigmaStar_safe_50 () Bool)
(declare-fun sigmaStar_safe_51 () String)
(declare-fun b_sigmaStar_safe_51 () Bool)
(declare-fun sigmaStar_252 () String)
(declare-fun b_sigmaStar_252 () Bool)
(declare-fun literal_10 () String)
(declare-fun b_literal_10 () Bool)
(declare-fun sigmaStar_057 () String)
(declare-fun b_sigmaStar_057 () Bool)
(declare-fun literal_15 () String)
(declare-fun b_literal_15 () Bool)
(declare-fun literal_20 () String)
(declare-fun b_literal_20 () Bool)
(declare-fun sigmaStar_163 () String)
(declare-fun b_sigmaStar_163 () Bool)
(declare-fun literal_23 () String)
(declare-fun b_literal_23 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_4 () String)
(declare-fun b_x_4 () Bool)
(declare-fun x_5 () String)
(declare-fun b_x_5 () Bool)
(declare-fun x_9 () String)
(declare-fun b_x_9 () Bool)
(declare-fun x_11 () String)
(declare-fun b_x_11 () Bool)
(declare-fun x_12 () String)
(declare-fun b_x_12 () Bool)
(declare-fun x_17 () String)
(declare-fun b_x_17 () Bool)
(declare-fun x_18 () String)
(declare-fun b_x_18 () Bool)
(declare-fun x_19 () String)
(declare-fun b_x_19 () Bool)
(declare-fun x_21 () String)
(declare-fun b_x_21 () Bool)
(declare-fun x_22 () String)
(declare-fun b_x_22 () Bool)
(declare-fun x_24 () String)
(declare-fun b_x_24 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)
(declare-fun sigmaStar_n0 () String)
(declare-fun b_sigmaStar_n0 () Bool)

(assert (= b_sigmaStar_safe_50 (RegexIn sigmaStar_safe_50 (RegexStar (RegexUnion (re.range "0" "9") (RegexUnion (re.range "a" "z") (re.range "A" "Z")))))))
(assert (= b_sigmaStar_safe_51 (RegexIn sigmaStar_safe_51 (RegexStar (RegexUnion (re.range "0" "9") (RegexUnion (re.range "a" "z") (re.range "A" "Z")))))))
(assert (and b_literal_10 (= literal_10 "[<a href='mailto:")))
(assert (and b_literal_15 (= literal_15 "' title='")))
(assert (and b_literal_20 (= literal_20 "'>")))
(assert (and b_literal_23 (= literal_23 "</a>]\\n")))
(assert (RegexIn atkPtn (RegexConcat (RegexUnion (Str2Reg "j") (RegexUnion (Str2Reg "|") (Str2Reg "J"))) (RegexConcat (RegexUnion (Str2Reg "a") (RegexUnion (Str2Reg "|") (Str2Reg "A"))) (RegexConcat (RegexUnion (Str2Reg "v") (RegexUnion (Str2Reg "|") (Str2Reg "V"))) (RegexConcat (RegexUnion (Str2Reg "a") (RegexUnion (Str2Reg "|") (Str2Reg "A"))) (RegexConcat (RegexUnion (Str2Reg "s") (RegexUnion (Str2Reg "|") (Str2Reg "S"))) (RegexConcat (RegexUnion (Str2Reg "c") (RegexUnion (Str2Reg "|") (Str2Reg "C"))) (RegexConcat (RegexUnion (Str2Reg "r") (RegexUnion (Str2Reg "|") (Str2Reg "R"))) (RegexConcat (RegexUnion (Str2Reg "i") (RegexUnion (Str2Reg "|") (Str2Reg "I"))) (RegexConcat (RegexUnion (Str2Reg "p") (RegexUnion (Str2Reg "|") (Str2Reg "P"))) (RegexConcat (RegexUnion (Str2Reg "t") (RegexUnion (Str2Reg "|") (Str2Reg "T"))) (Str2Reg ":")))))))))))))
(assert (= atk_sink (Concat atk_sigmaStar_1 (Concat atkPtn atk_sigmaStar_2))))
(assert (= b_x_4 (or (and (= x_4 sigmaStar_safe_50) b_sigmaStar_safe_50) (and (= x_4 sigmaStar_safe_51) b_sigmaStar_safe_51) ) ))
(assert (= b_x_5 (or (and (= x_5 x_4) b_x_4) (and (= x_5 sigmaStar_252) b_sigmaStar_252) ) ))
(assert (= b_x_9 (and (= x_9 (ReplaceAll x_5 "@" "&#64;") ) b_x_5) ))
(assert (= b_x_11 (and (= x_11 (Concat literal_10 x_9) ) b_literal_10 b_x_9) ))
(assert (= b_x_12 (or (and (= x_12 sigmaStar_n0) b_sigmaStar_n0) (and (= x_12 sigmaStar_057) b_sigmaStar_057) ) ))
(assert (= b_x_17 (and (= x_17 (ReplaceAll x_12 "@" "&#64;") ) b_x_12) ))
(assert (= b_x_18 (and (= x_18 (Concat x_11 literal_15) ) b_x_11 b_literal_15) ))
(assert (= b_x_19 (and (= x_19 (Concat x_18 x_17) ) b_x_18 b_x_17) ))
(assert (= b_x_21 (and (= x_21 (Concat x_19 literal_20) ) b_x_19 b_literal_20) ))
(assert (= b_x_22 (and (= x_22 (Concat x_21 sigmaStar_163) ) b_x_21 b_sigmaStar_163) ))
(assert (= b_x_24 (and (= x_24 (Concat x_22 literal_23) ) b_x_22 b_literal_23) ))
(assert (and (= sink x_24) (= sink atk_sink) b_x_24))
(assert (> 40 (+ (Length x_5) (Length sink)) ) )
(check-sat)
