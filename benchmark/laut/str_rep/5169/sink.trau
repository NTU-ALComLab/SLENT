(declare-fun literal_29 () String)
(declare-fun b_literal_29 () Bool)
(declare-fun sigmaStar_3060 () String)
(declare-fun b_sigmaStar_3060 () Bool)
(declare-fun literal_37 () String)
(declare-fun b_literal_37 () Bool)
(declare-fun literal_39 () String)
(declare-fun b_literal_39 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_31 () String)
(declare-fun b_x_31 () Bool)
(declare-fun x_36 () String)
(declare-fun b_x_36 () Bool)
(declare-fun x_38 () String)
(declare-fun b_x_38 () Bool)
(declare-fun x_40 () String)
(declare-fun b_x_40 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)

(assert (and b_literal_29 (= literal_29 "")))
(assert (and b_literal_37 (= literal_37 "'")))
(assert (and b_literal_39 (= literal_39 "'")))
(assert (RegexIn atkPtn (RegexConcat (RegexUnion (Str2Reg "j") (RegexUnion (Str2Reg "|") (Str2Reg "J"))) (RegexConcat (RegexUnion (Str2Reg "a") (RegexUnion (Str2Reg "|") (Str2Reg "A"))) (RegexConcat (RegexUnion (Str2Reg "v") (RegexUnion (Str2Reg "|") (Str2Reg "V"))) (RegexConcat (RegexUnion (Str2Reg "a") (RegexUnion (Str2Reg "|") (Str2Reg "A"))) (RegexConcat (RegexUnion (Str2Reg "s") (RegexUnion (Str2Reg "|") (Str2Reg "S"))) (RegexConcat (RegexUnion (Str2Reg "c") (RegexUnion (Str2Reg "|") (Str2Reg "C"))) (RegexConcat (RegexUnion (Str2Reg "r") (RegexUnion (Str2Reg "|") (Str2Reg "R"))) (RegexConcat (RegexUnion (Str2Reg "i") (RegexUnion (Str2Reg "|") (Str2Reg "I"))) (RegexConcat (RegexUnion (Str2Reg "p") (RegexUnion (Str2Reg "|") (Str2Reg "P"))) (RegexConcat (RegexUnion (Str2Reg "t") (RegexUnion (Str2Reg "|") (Str2Reg "T"))) (Str2Reg ":")))))))))))))
(assert (= atk_sink (Concat atk_sigmaStar_1 (Concat atkPtn atk_sigmaStar_2))))
(assert (= b_x_31 (or (and (= x_31 sigmaStar_3060) b_sigmaStar_3060) (and (= x_31 literal_29) b_literal_29) ) ))
(assert (= b_x_36 (and (= x_36 (ReplaceAll x_31 "'" "\\\\'") ) b_x_31) ))
(assert (= b_x_38 (and (= x_38 (Concat literal_37 x_36) ) b_literal_37 b_x_36) ))
(assert (= b_x_40 (and (= x_40 (Concat x_38 literal_39) ) b_x_38 b_literal_39) ))
(assert (and (= sink x_40) (= sink atk_sink) b_x_40))
(assert (< 40 (+ (Length x_31) (Length sink)) ) )
(check-sat)
