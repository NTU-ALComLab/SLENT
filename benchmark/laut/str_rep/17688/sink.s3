(declare-fun sigmaStar_safe_50 () String)
(declare-fun b_sigmaStar_safe_50 () Bool)
(declare-fun sigmaStar_safe_51 () String)
(declare-fun b_sigmaStar_safe_51 () Bool)
(declare-fun literal_7 () String)
(declare-fun b_literal_7 () Bool)
(declare-fun literal_11 () String)
(declare-fun b_literal_11 () Bool)
(declare-fun literal_16 () String)
(declare-fun b_literal_16 () Bool)
(declare-fun sigmaStar_061 () String)
(declare-fun b_sigmaStar_061 () Bool)
(declare-fun literal_19 () String)
(declare-fun b_literal_19 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_2 () String)
(declare-fun b_x_2 () Bool)
(declare-fun x_6 () String)
(declare-fun b_x_6 () Bool)
(declare-fun x_8 () String)
(declare-fun b_x_8 () Bool)
(declare-fun x_13 () String)
(declare-fun b_x_13 () Bool)
(declare-fun x_14 () String)
(declare-fun b_x_14 () Bool)
(declare-fun x_15 () String)
(declare-fun b_x_15 () Bool)
(declare-fun x_17 () String)
(declare-fun b_x_17 () Bool)
(declare-fun x_18 () String)
(declare-fun b_x_18 () Bool)
(declare-fun x_20 () String)
(declare-fun b_x_20 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)
(declare-fun atk_part1 () String)
(declare-fun atk_part2 () String)
(declare-fun atk_part3 () String)
(declare-fun sigmaStar_n0 () String)
(declare-fun b_sigmaStar_n0 () Bool)

(assert (= b_sigmaStar_safe_50 (In sigmaStar_safe_50 (Star (Union "0" (Union "1" (Union "2" (Union "3" (Union "4" (Union "5" (Union "6" (Union "7" (Union "8" (Union "9" (Union "a" (Union "b" (Union "c" (Union "d" (Union "e" (Union "f" (Union "g" (Union "h" (Union "i" (Union "j" (Union "k" (Union "l" (Union "m" (Union "n" (Union "o" (Union "p" (Union "q" (Union "r" (Union "s" (Union "t" (Union "u" (Union "v" (Union "w" (Union "x" (Union "y" (Union "z" (Union "A" (Union "B" (Union "C" (Union "D" (Union "E" (Union "F" (Union "G" (Union "H" (Union "I" (Union "J" (Union "K" (Union "L" (Union "M" (Union "N" (Union "O" (Union "P" (Union "Q" (Union "R" (Union "S" (Union "T" (Union "U" (Union "V" (Union "W" (Union "X" (Union "Y" "Z")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (= b_sigmaStar_safe_51 (In sigmaStar_safe_51 (Star (Union "0" (Union "1" (Union "2" (Union "3" (Union "4" (Union "5" (Union "6" (Union "7" (Union "8" (Union "9" (Union "a" (Union "b" (Union "c" (Union "d" (Union "e" (Union "f" (Union "g" (Union "h" (Union "i" (Union "j" (Union "k" (Union "l" (Union "m" (Union "n" (Union "o" (Union "p" (Union "q" (Union "r" (Union "s" (Union "t" (Union "u" (Union "v" (Union "w" (Union "x" (Union "y" (Union "z" (Union "A" (Union "B" (Union "C" (Union "D" (Union "E" (Union "F" (Union "G" (Union "H" (Union "I" (Union "J" (Union "K" (Union "L" (Union "M" (Union "N" (Union "O" (Union "P" (Union "Q" (Union "R" (Union "S" (Union "T" (Union "U" (Union "V" (Union "W" (Union "X" (Union "Y" "Z")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (and b_literal_7 (= literal_7 "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a")))
(assert (and b_literal_11 (= literal_11 "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")))
(assert (and b_literal_16 (= literal_16 "\x27\x3e")))
(assert (and b_literal_19 (= literal_19 "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")))
(assert (In atk_part1 "<SCRIPT "))
(assert (In atk_part3 ">"))
(assert (= atkPtn (Concat atk_part1 (Concat atk_part2 atk_part3))))
(assert (= atk_sink (Concat atk_sigmaStar_1 (Concat atkPtn atk_sigmaStar_2))))
(assert (= b_x_2 (or (and (= x_2 sigmaStar_safe_50) b_sigmaStar_safe_50) (and (= x_2 sigmaStar_safe_51) b_sigmaStar_safe_51) ) ))
(assert (= b_x_6 (and (= x_6 (ReplaceAll x_2 "@" "&#64;") ) b_x_2) ))
(assert (= b_x_8 (and (= x_8 (Concat literal_7 x_6) ) b_literal_7 b_x_6) ))
(assert (= b_x_13 (and (= x_13 (ReplaceAll sigmaStar_n0 "@" "&#64;") ) b_sigmaStar_n0) ))
(assert (= b_x_14 (and (= x_14 (Concat x_8 literal_11) ) b_x_8 b_literal_11) ))
(assert (= b_x_15 (and (= x_15 (Concat x_14 x_13) ) b_x_14 b_x_13) ))
(assert (= b_x_17 (and (= x_17 (Concat x_15 literal_16) ) b_x_15 b_literal_16) ))
(assert (= b_x_18 (and (= x_18 (Concat x_17 sigmaStar_061) ) b_x_17 b_sigmaStar_061) ))
(assert (= b_x_20 (and (= x_20 (Concat x_18 literal_19) ) b_x_18 b_literal_19) ))
(assert (and (= sink x_20) (= sink atk_sink) b_x_20))
(assert (< 10 (+ (Length x_2) (Length sink)) ) )
(check-sat)
