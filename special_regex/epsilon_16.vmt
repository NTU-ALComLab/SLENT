(declare-fun x0 () Bool)
(declare-fun x0.next () Bool)
(declare-fun x1 () Bool)
(declare-fun x1.next () Bool)
(declare-fun x2 () Bool)
(declare-fun x2.next () Bool)
(declare-fun x3 () Bool)
(declare-fun x3.next () Bool)
(declare-fun x4 () Bool)
(declare-fun x4.next () Bool)
(declare-fun x5 () Bool)
(declare-fun x5.next () Bool)
(declare-fun x6 () Bool)
(declare-fun x6.next () Bool)
(declare-fun x7 () Bool)
(declare-fun x7.next () Bool)
(declare-fun x8 () Bool)
(declare-fun x8.next () Bool)
(declare-fun x9 () Bool)
(declare-fun x9.next () Bool)
(declare-fun x10 () Bool)
(declare-fun x10.next () Bool)
(declare-fun x11 () Bool)
(declare-fun x11.next () Bool)
(declare-fun x12 () Bool)
(declare-fun x12.next () Bool)
(declare-fun x13 () Bool)
(declare-fun x13.next () Bool)
(declare-fun x14 () Bool)
(declare-fun x14.next () Bool)
(declare-fun x15 () Bool)
(declare-fun x15.next () Bool)
(declare-fun x16 () Bool)
(declare-fun x16.next () Bool)
(declare-fun s0 () Bool)
(declare-fun s0.next () Bool)
;
(define-fun nxt0 () Bool (! x0 :next x0.next))
(define-fun nxt1 () Bool (! x1 :next x1.next))
(define-fun nxt2 () Bool (! x2 :next x2.next))
(define-fun nxt3 () Bool (! x3 :next x3.next))
(define-fun nxt4 () Bool (! x4 :next x4.next))
(define-fun nxt5 () Bool (! x5 :next x5.next))
(define-fun nxt6 () Bool (! x6 :next x6.next))
(define-fun nxt7 () Bool (! x7 :next x7.next))
(define-fun nxt8 () Bool (! x8 :next x8.next))
(define-fun nxt9 () Bool (! x9 :next x9.next))
(define-fun nxt10 () Bool (! x10 :next x10.next))
(define-fun nxt11 () Bool (! x11 :next x11.next))
(define-fun nxt12 () Bool (! x12 :next x12.next))
(define-fun nxt13 () Bool (! x13 :next x13.next))
(define-fun nxt14 () Bool (! x14 :next x14.next))
(define-fun nxt15 () Bool (! x15 :next x15.next))
(define-fun nxt16 () Bool (! x16 :next x16.next))
(define-fun nxt17 () Bool (! s0 :next s0.next))
;
(define-fun d0 ((s0 Bool)) Bool (not s0))
(define-fun d1 () Bool false)
(define-fun d2 ((s0 Bool)) Bool (not s0))
;
;
(define-fun I () Bool (! (d0 s0) :init true))
(define-fun T () Bool (! d1 :trans true))
(define-fun O () Bool (! (not (d2 s0)) :invar-property 0))
